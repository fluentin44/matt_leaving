[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bioinformatics handoff",
    "section": "",
    "text": "This is a summary of my work, covering as far as possible details on:\n\nSingle cell\nSingle nuclear\nRNAseq\nPseudobulk\nATACseq"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "atac_seq.html",
    "href": "atac_seq.html",
    "title": "ATACseq",
    "section": "",
    "text": "This aimed to develop the start of an ATACseq pipeline."
  },
  {
    "objectID": "atac_seq.html#for-one-sample",
    "href": "atac_seq.html#for-one-sample",
    "title": "ATACseq",
    "section": "For one sample",
    "text": "For one sample\n\ncd /scratch/moh1u21/ATAC_seq_test\n\necho $PATH | sed 's/:/\\n/g' | sort | uniq -c\ntoday=$(date +\"%Y-%m-%d\")\n\nproject_folder=/scratch/moh1u21/ATAC_seq_test\n# genomedir=/Users/fluentin44/Documents/22-05-15-index_genome/genome_index_hg19 \ngenomedir=/scratch/moh1u21/ATAC_seq_test/GRCh37\n\nmkdir -p results_test/reports/fastp\nmkdir -p results_test/reports/fastqc\nmkdir -p results_test/reports/multiqc\nmkdir -p results_test/logs\nmkdir -p data_test/trimmed\n\nfastp_logfile=results_test/logs/test_fastp_log.txt\n\n# 1. QC - Fastq\n\nfastqc data_test/test_files/*.fastq.gz \\\n-o results_test/reports/fastqc \\\n-t 60 \n\nmultiqc results_test/reports/fastqc \\\n-o results_test/reports/multiqc/ \\\n-n test_multiqc_pre_trim\n\n# 2. Adapter removal and deduplication\n## 2.1a - For multiple files\n\n# find /scratch/moh1u21/ATAC_seq_test/data_test/test_files -maxdepth 1 -type f | cut -d\"_\" -f10-12 | sort | uniq > fast_files.txt\n\n# cat fast_files.txt | parallel --dry-run \\\nfastp \\\n-w 16 \\\n-p \\\n--length_required 50 \\\n-i data_test/test_files/SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_1.fastq.gz \\\n-I data_test/test_files/SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_2.fastq.gz \\\n-o data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_1.fastq.gz \\\n-O data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_2.fastq.gz \\\n--correction \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results_test/reports/fastp/trimmed_fastp_report.html \\\n--json results_test/reports/fastp/trimmed_fastp_report.json > $fastp_logfile 2>&1\n\n# QC \n\nfastqc data_test/test_files/trimmed/*.fastq.gz \\\n-o results_test/reports/fastqc/ \\\n-t 60 \n# --contaminants data/adapters.txt\n\nmultiqc results_test/reports/fastqc/ \\\n-o results_test/reports/multiqc/ \\\n-n multiqc_post_trim\n\n# 3. Align \n## 3.1. Load genome - we are using a prebuilt so doesnt need to be done \n# bowtie2-build  <genome.fa>  <genomeIndexName>\n\n# # ls data/test_files | cut -d\"_\" -f1-2 | sort | uniq > filenames.txt\n# cat fast_files.txt | parallel \\\n#     fastp \\\n#     -i {}_1.fastq -o {}_1.trimmed.fq \\\n#     -I {}_2.fastq -O {}_2.trimmed.fq \\\n#     --max_len1 20 \\\n#     --max_len2 20\n\n## 3.2. Align\n\n# cat fast_files.txt | parallel \\\nbowtie2 --very-sensitive \\\n -q \\\n -x /scratch/moh1u21/ATAC_seq_test/GRCh37/GRCh37 \\\n -1 data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_1.fastq.gz \\\n -2 data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_2.fastq.gz \\\n -S test_aligned.sam 2>> bt2log_test_aligned.log\n \n#  | samtools view -@ 60 -Shu - \\\n#  | samtools sort - -O {}_aligned.bam '>>' bw2_alignment.txt '2>&1'\n\n# cat fast_files.txt | parallel \\\nsamtools view -h -S -b test_aligned.sam -o test_aligned.bam \n\n# # 4. Remove MTs\n# samtools view -h  <inBAM>  |  removeChrom - - chrM  |  samtools view -b -  >  <outBAM>\n\n# # 5. Deduplicate \n# java -jar $PICARD_TOOLS_HOME/picard.jar MarkDuplicates I=<inBAM> O=<outBAM> M=dups.txt REMOVE_DUPLICATES=true\n\n# # 6. Remove non-uniques\n# samtools view -b  -q 10  <inBAM>  >  <outBAM>\n\n# # 7. Peak calling\n# module load ATAC-seq\n# samtools view -h  <BAM>  |  SAMtoBED  -i -  -o <BED>  -x  -v\n# macs2 callpeak  -t <BED>  -f BEDPE  -n NAME  -g ce  --keep-dup all"
  },
  {
    "objectID": "atac_seq.html#for-multiple-samples",
    "href": "atac_seq.html#for-multiple-samples",
    "title": "ATACseq",
    "section": "For multiple samples",
    "text": "For multiple samples\n\ncd /scratch/moh1u21/ATAC_seq_test\n\necho $PATH | sed 's/:/\\n/g' | sort | uniq -c\ntoday=$(date +\"%Y-%m-%d\")\n\nproject_folder=/scratch/moh1u21/ATAC_seq_test\n# genomedir=/Users/fluentin44/Documents/22-05-15-index_genome/genome_index_hg19 \ngenomedir=/scratch/moh1u21/ATAC_seq_test/GRCh37\n\nmkdir -p results/reports/fastp\nmkdir -p results/reports/fastqc\nmkdir -p results/reports/multiqc\nmkdir -p results/reports/bowtie2\nmkdir -p results/logs\nmkdir -p results/sams\nmkdir -p results/bams\nmkdir -p data/trimmed\n\nfastp_logfile=results/logs/fastp_log.txt\n\n# 1. QC - Fastq\n\nfastqc data/demultiplexed_reads/ATAC_seq_test/*.fastq.gz \\\n-o results/reports/fastqc \\\n-t 60 \n\nmultiqc results_test/reports/fastqc \\\n-o results/reports/multiqc/ \\\n-n multiqc_pre_trim\n\n# 2. Adapter removal and deduplication\n\nfind /scratch/moh1u21/ATAC_seq_test/data/demultiplexed_reads/ATAC_seq_test/ -maxdepth 1 -type f | \\\nawk -F/ '{print $NF}' | \\\ncut -d\"_\" -f1-2 | \\\nsort | \\\nuniq > fast_files.txt\n\ncat fast_files.txt | parallel \\\nfastp \\\n-w 16 \\\n-p \\\n--length_required 50 \\\n-i data/demultiplexed_reads/ATAC_seq_test/{}_R1_001.fastq.gz \\\n-I data/demultiplexed_reads/ATAC_seq_test/{}_R2_001.fastq.gz \\\n-o data/demultiplexed_reads/trimmed/trimmed_{}_R1_001.fastq.gz \\\n-O data/demultiplexed_reads/trimmed/trimmed_{}_R2_001.fastq.gz \\\n--detect_adapter_for_pe \\\n--correction \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results/reports/fastp/{}_trimmed_fastp_report.html \\\n--json results/reports/fastp/{}_trimmed_fastp_report.json '>' $fastp_logfile '2>&1'\n\nfastqc data/demultiplexed_reads/trimmed/*.fastq.gz \\\n-o results/reports/fastqc/ \\\n-t 60 \n# --contaminants data/adapters.txt\n\nmultiqc results/reports/fastqc/ \\\n-o results/reports/multiqc/ \\\n-n multiqc_post_trim\n\n# 3. Align \n## 3.1. Load genome\n# bowtie2-build  <genome.fa>  <genomeIndexName>\n\n# # ls data/test_files | cut -d\"_\" -f1-2 | sort | uniq > filenames.txt\n# cat fast_files.txt | parallel \\\n#     fastp \\\n#     -i {}_1.fastq -o {}_1.trimmed.fq \\\n#     -I {}_2.fastq -O {}_2.trimmed.fq \\\n#     --max_len1 20 \\\n#     --max_len2 20\n\n## 3.2. Align\n\ncat fast_files.txt | parallel \\\nbowtie2 --very-sensitive \\\n -q \\\n -x /scratch/moh1u21/ATAC_seq_test/GRCh37/GRCh37 \\\n -1 data/demultiplexed_reads/trimmed/trimmed_{}_R1_001.fastq.gz \\\n -2 data/demultiplexed_reads/trimmed/trimmed_{}_R2_001.fastq.gz \\\n -S results/sams/{}_test_aligned.sam '2>>' results/reports/bowtie2/{}_bt2log_test_aligned.log\n\ncat fast_files.txt | parallel \\\nsamtools view -h -S -b results/sams/{}_test_aligned.sam -o results/bams/{}_test_aligned.bam \n\n# # 4. Remove MTs\n# samtools view -h  <inBAM>  |  removeChrom - - chrM  |  samtools view -b -  >  <outBAM>\n\n# # 5. Deduplicate \n# java -jar $PICARD_TOOLS_HOME/picard.jar MarkDuplicates I=<inBAM> O=<outBAM> M=dups.txt REMOVE_DUPLICATES=true\n\n# # 6. Remove non-uniques\n# samtools view -b  -q 10  <inBAM>  >  <outBAM>\n\n# # 7. Peak calling\n# module load ATAC-seq\n# samtools view -h  <BAM>  |  SAMtoBED  -i -  -o <BED>  -x  -v\n# macs2 callpeak  -t <BED>  -f BEDPE  -n NAME  -g ce  --keep-dup all"
  },
  {
    "objectID": "sinfgle_cell.html",
    "href": "sinfgle_cell.html",
    "title": "Single Cell",
    "section": "",
    "text": "suppressPackageStartupMessages(library(DropletUtils))\nsuppressPackageStartupMessages(library(reticulate))\nsuppressPackageStartupMessages(library(singleCellTK))\nsuppressPackageStartupMessages(library(AnnotationHub))\nsuppressPackageStartupMessages(library(SingleCellExperiment))\nsuppressPackageStartupMessages(library(scater))\nsuppressPackageStartupMessages(library(ensembldb))\nsuppressPackageStartupMessages(library(BiocParallel))\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(patchwork))\nsuppressPackageStartupMessages(library(ggvenn))\nsuppressPackageStartupMessages(library(magrittr))\nsuppressPackageStartupMessages(library(Seurat))\nsuppressPackageStartupMessages(library(clustree))\nsuppressPackageStartupMessages(library(scran))\nsuppressPackageStartupMessages(library(bluster))\n\n# use_python(\"/Users/fluentin44/miniconda3/envs/sc_qc/bin/python\")\n\n# bp.params <- MulticoreParam(workers = 30)\n\n# BiocManager::install(c(\"DropletUtils\",\n#                        \"AnnotationHub\",\n#                        \"SingleCellExperiment\",\n#                        \"scater\",\n#                        \"ensembldb\",\n#                        \"singleCellTK\",\n#                        \"BiocParallel\"\n#                        ))\n# install.packages(c(\"BiocManager\",\n#                    \"reticulate\",\n#                    \"patchwork\",\n#                    \"ggvenn\",\n#                    \"tidyverse\"\n#                    ))\n\nbibs <- readRDS(\"data/bibs.rds\")\n\nset.seed(9816)\n\nbibs_qcd <- \n  runBarcodeRankDrops(\n    bibs,\n    sample = colData(bibs)$sample,\n    useAssay = \"counts\",\n    lower = 500,\n    fitBounds = NULL,\n    df = 20\n  )\n\nplots <- \n  plotBarcodeRankScatter(\n    bibs_qcd,\n    sample = colData(bibs_qcd)$sample,\n    defaultTheme = FALSE,\n    dotSize = 0.5,\n    title = NULL,\n    titleSize = 12,\n    xlab = NULL,\n    ylab = NULL,\n    axisSize = 12,\n    axisLabelSize = 15,\n    legendSize = 10,\n    combinePlot = \"all\",\n    sampleRelHeights = 1,\n    sampleRelWidths = 1\n  )\n\n# # adjust to add titles to plots\n# plots <- flatten(plots)\n# plots[[1]] + labs(title=\"Plot of length \\n by dose\")\n# gridExtra::grid.arrange(grobs=plots, ncol=3)\n\nbibs_qcd <- \n  runEmptyDrops(\n    bibs_qcd,\n    lower = 500,\n    sample = colData(bibs)$sample,\n    retain = 1000\n    # BPPARAM = bp.params\n  )\n\ntable(duplicated(rownames(bibs_qcd)))\nrownames(bibs_qcd) <- scuttle::uniquifyFeatureNames(rownames(bibs_qcd), rowData(bibs_qcd)$feature_name)\nrowData(bibs_qcd)$updated_feature_name <- rownames(bibs_qcd)\ntable(duplicated(rownames(bibs_qcd)))\n# saveRDS(bibs_qcd, \"data/bibs_qcd.rds\")\nbibs_qcd <- readRDS(\"data/bibs_qcd.rds\")\n\nbibs_ed <- bibs_qcd \n\n# abbles <-  \n# runDropletQC(\n#   bibs,\n#   algorithms = c(\"QCMetrics\", \"emptyDrops\", \"barcodeRanks\"),\n#   sample = colData(bibs)$sample,\n#   useAssay = \"counts\",\n#   paramsList = NULL\n# )\n\n\n# Testing whether emptyDrops is sound -------------------------------------\n\nset.seed(100)\nall.out <- emptyDrops(counts(bibs), lower=500, retain=1000, test.ambient=TRUE)\nhist(all.out$PValue[all.out$Total <= 500 & all.out$Total > 0],\n     xlab=\"P-value\", main=\"\", col=\"grey80\") \n\nmean(all.out$PValue[all.out$Total <= 500 & all.out$Total > 0] <= 0.05)\n\n# is.cell <- abbles$dropletUtils_emptyDrops_fdr <= 0.001\n# sum(is.cell, na.rm=TRUE)\n\n# saveRDS(bibs_ed, \"empty_dropped_sce.rds\")\n# bibs_ed <- readRDS(\"empty_dropped_sce.rds\")\n\n\n# Plot empty drops results ------------------------------------------------\n\nplotEmptyDropsResults(bibs_ed, sample=bibs_ed$samples)\nsummary(bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001)\ntable(Sig=bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001, Limited=bibs_ed$dropletUtils_emptyDrops_limited)\n\ncolData(bibs_ed) %>%\n  as.data.frame() %>% \n  filter(dropletUtils_emptyDrops_fdr <= 0.001) %>%\n  filter(!is.na(dropletUtils_emptyDrops_fdr)) %>%\n  group_by(sample) %>%\n  summarise(cells=n()) %T>%\n  readr::write_excel_csv(\"results/cellno_per_sample.csv\", col_names=T)\n\nbibs_dropped <- bibs_ed[,which(bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001)]\nbibs_dropped <- bibs_dropped[,!is.na(bibs_dropped$dropletUtils_emptyDrops_fdr)]\n\nis.cell <- bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001\nsum(is.cell, na.rm=TRUE)\n\n# set.seed(12345)\n# bibsy <- runCellQC(bibs_dropped, \n#                    algorithms = c(\n#                      \"QCMetrics\", \n#                      \"scrublet\", \n#                      \"scDblFinder\", \n#                      \"cxds\",\n#                      \"bcds\",\n#                      \"cxds_bcds_hybrid\",\n#                      \"doubletFinder\", \n#                      \"decontX\"\n#                     #  \"soupX\"\n#                    ), \n#                    background=bibs_ed,\n#                    mitoPrefix=\"^MT-\",\n#                    sample = colData(bibs_dropped)$sample\n#                    )\n# \n# # saveRDS(bibsy, \"data/bibsy.rds\")\n# bibsy <- readRDS(\"data/bibsy.rds\")\n# \n# table(colData(bibsy)$scrublet_call)\n# table(colData(bibsy)$scDblFinder_doublet_call)\n# length(which(colData(bibsy)$decontX_contamination < 0.4))\n# \n# hist(colData(bibsy)$decontX_contamination)\n\n\n# # Normalization.\n# set.seed(1234)\n# bibsy_umap <- logNormCounts(bibsy)\n# dec <- modelGeneVar(bibsy_umap)\n# hvg <- getTopHVGs(dec, prop=0.1)\n# bibsy_umap <- runPCA(bibsy_umap, ncomponents=25, subset_row=hvg)\n# colLabels(bibsy_umap) <- clusterCells(bibsy_umap, use.dimred='PCA',\n#     BLUSPARAM=NNGraphParam(cluster.fun=\"louvain\"))    \n# bibsy_umap <- runUMAP(bibsy_umap, dimred = 'PCA')\n# plotUMAP(bibsy_umap, colour_by=\"label\")\n\n\n# oncle <- \n#   plotDecontXResults(\n#     bibsy,\n#     reducedDimName=\"decontX_sample_a_178K400_UMAP\"\n#   )\n\n\n\n# Diagnostic plots --------------------------------------------------------\n\ngenesPerCell <- colSums(counts(bibs_dropped) > 0)\nsummary(genesPerCell)\nplot(density(genesPerCell), main=\"\", xlab=\"Genes per cell\")\n\ntmpCounts <- counts(bibs_dropped)[,1:1000]\n\nplot(rowSums(tmpCounts),\n     rowMeans(tmpCounts > 0),\n     log = \"x\",\n     xlab=\"total number of UMIs\",\n     ylab=\"proportion of cells expressing the gene\"\n)\n\nrm(tmpCounts)\n\nrel_expression <- t( t(counts(bibs_dropped)) / colSums(counts(bibs_dropped))) * 100\nrownames(rel_expression) <- rowData(bibs_dropped)$feature_name\nmost_expressed <- sort(rowSums( rel_expression ),T)[20:1]\nplot_data <- as.matrix(t(rel_expression[names(most_expressed),]))\n\nboxplot(plot_data, cex=0.1, las=1, xlab=\"% total count per cell\", horizontal=TRUE)\n\n# Remove genes with zero expression across cell pop.\ndetected_genes <- rowSums(counts(bibs_dropped)) > 0\ntable(detected_genes)\nbibs_dropped <- bibs_dropped[detected_genes,]\n\n\n# ah <- AnnotationHub()\n# ens.mm.98 <- query(ah, c(\"Homo sapiens\", \"EnsDb\", 98))[[1]] \n\n# genes <- rowData(bibs_dropped)$feature_ID\n# gene_annot <- AnnotationDbi::select(ens.mm.98, \n#                                     keys = genes,\n#                                     keytype = \"GENEID\",\n#                                     columns = c(\"GENEID\", \"SEQNAME\")) %>%\n#     set_names(c(\"ID\", \"Chromosome\"))\n# rowData(bibs_dropped) <- merge(rowData(bibs_dropped), gene_annot, \n#                                 by.x = \"feature_ID\", \n#                                 by.y = \"ID\", \n#                                 all.x=TRUE, \n#                                 sort=FALSE)\n# rownames(rowData(bibs_dropped)) <- rowData(bibs_dropped)$feature_ID\n\n\n# QC ----------------------------------------------------------------------\n\n# Assess number of mitochondrial genes in dataset\njobbo <- bibs_dropped[grep(\"^MT-\",rownames(bibs_dropped)),]\n# jobbo <- rowData(bibs_dropped)[grep(\"^MT\",rowData(bibs_dropped)$Chromosome),]\ntable(rownames(rowData(bibs_dropped)) %in% rownames(jobbo))\n\nhead(rowData(bibs_dropped))\n\n# Tag mito ogenes as mito\nis.mito <- grep(\"^MT-\",rownames(bibs_dropped))\n\n# QC of cells - lib size, features, mito, discard\nsce <- addPerCellQC(bibs_dropped, subsets=list(Mito=is.mito))\ncell_qc_results <- quickPerCellQC(colData(sce), percent_subsets=c(\"subsets_Mito_percent\"))\ncolSums(as.data.frame(cell_qc_results))\n\n# Add qc results back into sce object\nsce$low_lib_size <- cell_qc_results$low_lib_size\nsce$low_n_features <- cell_qc_results$low_n_features\nsce$high_Mito_percent <- cell_qc_results$high_subsets_Mito_percent\nsce$discard <- cell_qc_results$discard\nsce$sn_high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\", min.diff=0.5) # adjustment for snuclear\n\nsummary(sce$subsets_Mito_percent == 0) # Assessing how many cells have zero mito gene expression\n\n# Writing no cells with high mito to csv\ncolData(sce) %>%\n  as.data.frame() %>%\n  filter(sn_high_Mito_percent == TRUE) %>%\n  group_by(sample) %>%\n  summarise(cells=n()) %T>%\n  readr::write_excel_csv(\"results/highmito_per_sample.csv\", col_names=T)\n\n# Comparing sn nuclear adjustrment to isOutlier mito detection\ntable(sce$sn_high_Mito_percent)\ntable(sce$high_Mito_percent)\n\n# sce <- addPerCellQC(bibs_dropped, subsets=list(Mt=grep(\"^MT-\", rownames(bibs_dropped))))\n# summary(sce$subsets_Mt_percent)\n# cell_qc_results <- quickPerCellQC(colData(sce), percent_subsets=c(\"subsets_Mt_percent\"))\n# colSums(as.data.frame(cell_qc_results))\n# sce$high_subsets_Mt_percent <- isOutlier(sce$subsets_Mt_percent, type=\"higher\", min.diff=0.5)\n# cell_qc_results$discard <- Reduce(\"|\", cell_qc_results[,colnames(cell_qc_results)!=\"discard\"])\n# colSums(as.matrix(cell_qc_results))\n\n# plotColData(sce, y=\"subsets_Mt_percent\",\n#     colour_by=I(cell_qc_results$high_subsets_Mt_percent))\n\n\n# MAD thresholds that were chosen for low lib size and features\n\n# low_lib_size <- isOutlier(sce$sum, log=TRUE, type=\"lower\")\n# table(low_lib_size)\nattr(sce$low_lib_size, \"thresholds\")[1]\n# colData(sce)$low_lib_size <- low_lib_size\n\n# low_n_features <- isOutlier(sce$detected, log=TRUE, type=\"lower\")\n# table(low_n_features)\nattr(sce$low_n_features, \"thresholds\")[1]\n# colData(sce)$low_n_features <- low_n_features\n\n# QC plots per sample \ngridExtra::grid.arrange(\n  plotColData(sce, \n              x=\"sample\", \n              y=\"sum\",\n              colour_by = \"low_lib_size\") + \n    scale_y_log10() + \n    labs(y = \"Total count\", title = \"Total count\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n  \n  plotColData(sce, \n              x=\"sample\", \n              y=\"detected\",\n              colour_by = \"low_n_features\") + \n    scale_y_log10() + \n    labs(y = \"Genes detected\", title = \"Genes detected\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n  \n  plotColData(sce, \n              x=\"sum\", \n              y=\"subsets_Mito_percent\", \n              colour_by=\"high_Mito_percent\"),\n  ncol=1\n)\n\n# sn_high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\", min.diff=0.5) # adjustment for snuclear\n# # discard <- Reduce(\"|\", sce[,colnames(sce)!=\"discard\"])\n# # colSums(as.matrix(sce))\n# # high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\")\n# table(sn_high_Mito_percent)\nattr(sce$high_Mito_percent, \"thresholds\")[2]\nattr(sce$sn_high_Mito_percent, \"thresholds\")[2]\n# colData(sce)$sn_high_Mito_percent <- sn_high_Mito_percent\nsummary(sce$high_Mito_percent)\nsummary(sce$sn_high_Mito_percent)\n\ngridExtra::grid.arrange(\nplotColData(sce,  \n            x=\"sample\",\n            y=\"subsets_Mito_percent\",\n            colour_by = \"sn_high_Mito_percent\") + \n  labs(y = \"Percentage mitochondrial UMIs\",\n       title = \"Mitochondrial UMIs\") +\n  guides(colour=guide_legend(title=\"Discarded\")),\n\nplotColData(sce, \n            x=\"sum\", \n            y=\"subsets_Mito_percent\", \n            colour_by=\"sn_high_Mito_percent\"),\nncol=2\n)\n\nmito_thresh <- 4.5\n\ngridExtra::grid.arrange(\n  # Histogram subsets mito percent\n  colData(sce) %>% \n    as.data.frame() %>% \n    ggplot(aes(x=subsets_Mito_percent)) + \n    geom_density(alpha=0.2, fill=\"#00BFC4\", colour=\"#00BFC4\") +\n    scale_x_log10() + \n    geom_vline(xintercept = 0.2) +\n    geom_vline(xintercept=mito_thresh, color=\"#F8766D\", linetype=\"dashed\"),\n  \n  # Visualize the distribution of mitochondrial gene expression detected per cell\n  colData(sce) %>% \n    as.data.frame() %>% \n    ggplot(aes(color=sample, x=subsets_Mito_percent, fill=sample)) + \n    geom_density(alpha = 0.2) + \n    scale_x_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 0.2) +\n    geom_vline(xintercept = mito_thresh, color=\"#F8766D\", linetype=\"dashed\"),\n    \n  ncol=2 \n)\n\ngridExtra::grid.arrange(\n  # Complexity plot\n  colData(sce) %>% \n    as.data.frame() %>%\n    ggplot(aes(x=sum, y=detected, color=subsets_Mito_percent)) + \n    geom_point() + \n    scale_colour_gradient(low = \"gray90\", high = \"black\") +\n    stat_smooth(method=lm) +\n    scale_x_log10() + \n    scale_y_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 500) +\n    geom_hline(yintercept = 250) ,\n  # facet_wrap(~sample)\n\n  plotColData(sce, x=\"sum\", y=\"detected\", colour_by=\"adjusted_discard\"),\n  ncol=2\n)\n\n# adjusting mito threshold\nsce$adjusted_mito_threshold <- \n  data.frame(hmp = sce$subsets_Mito_percent >= mito_thresh) %>%\n  pull(hmp)\n\nsce$adjusted_discard <- \n  data.frame(lls = sce$low_lib_size,\n             lnf = sce$low_n_features,\n             hmp = sce$adjusted_mito_threshold) %>%\n  mutate(adjusted_discard = case_when(\n    if_any(everything(), ~. == TRUE) ~ TRUE, \n    .default=FALSE)) %>%\n  pull(adjusted_discard)\n\n# Checking effect of changed threshold\ntable(discard=sce$discard, adjusted_discard=sce$adjusted_discard)\n## in this case simply reduced the nbumber of discarded to 41\n\n# colData(sce)$sn_high_Mito_percent <- sn_high_Mito_percent\ngridExtra::grid.arrange(\n  plotColData(sce,  \n              x=\"sample\",\n              y=\"subsets_Mito_percent\",\n              colour_by = \"adjusted_discard\") + \n    labs(y = \"Percentage mitochondrial UMIs\",\n        title = \"Mitochondrial UMIs\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n\n  plotColData(sce, \n              x=\"sum\", \n              y=\"subsets_Mito_percent\", \n              colour_by=\"adjusted_discard\"),\n  ncol=2\n)\n\nsummary(sce$high_Mito_percent)\nsummary(sce$sn_high_Mito_percent)\nsummary(sce$adjusted_mito_threshold)\n\n# Final removed for mito\ncolData(sce) %>%\nas.data.frame() %>%\nfilter(adjusted_mito_threshold == TRUE) %>%\ngroup_by(sample) %>%\nsummarise(cells=n()) %T>%\nreadr::write_excel_csv(\"results/adjustedmito_per_sample.csv\", col_names=T)\n\nsaveRDS(sce, \"data/post_mit_thresh.rds\")\n\n# sce.filtered <- sce[, !sce$discard]\nsce.filtered <- sce[, !sce$adjusted_discard]\ncolData(sce.filtered) <- colData(sce.filtered)[,c(1:8)]\nsce.filtered <- addPerCellQC(sce.filtered)\ncolnames(colData(sce.filtered))\n\ndim(sce)\ndim(sce.filtered)\n# saveRDS(sce.filtered, \"data/sce_filtered.rds\")\nsce.filtered <- readRDS(\"data/sce_filtered.rds\")\n\n# the cell sparsity: for each cell, the proportion of genes that are not detected\n# the gene sparsity: for each gene, the proportion of cells in which it is not detected\n\n# # Sparsity - perhaps a bit harsh\n# sce_sparse <- addPerFeatureQC(sce.filtered)\n# rowData(sce_sparse)\n\n# colData(sce_sparse)$cell_sparsity <- 1 - (colData(sce_sparse)$detected / nrow(sce_sparse))\n# rowData(sce_sparse)$gene_sparsity <- (100 - rowData(sce_sparse)$detected) / 100\n\n# hist(sce_sparse$cell_sparsity, breaks=50, col=\"grey80\", xlab=\"Cell sparsity\", main=\"\")\n# hist(rowData(sce_sparse)$gene_sparsity, breaks=50, col=\"grey80\", xlab=\"Gene sparsity\", main=\"\")\n\n# sce_sparse$sparse_cells <- sce_sparse$cell_sparsity > 0.99\n# table(sce_sparse$sparse_cells)\n\n# min_cells <- 1 - (10 / ncol(sce_sparse))\n# rowData(sce_sparse)$sparse_genes <- rowData(sce_sparse)$gene_sparsity > min_cells\n# table(rowData(sce_sparse)$sparse_genes)\n\n# sce_final <- sce_sparse[, !sce_sparse$sparse_cells]\n# dim(sce_final)\n# sce_final <- sce_final[!rowData(sce_final)$sparse_genes, ]\n# dim(sce_final)\n\nsaveRDS(sce_final, \"post_sceqc_object.rds\")\n\n# Post-qc seurat ----------------------------------------------------------\n\ntable(Matrix::rowSums(counts(sce.filtered) >= 1) >=3)\nkeep <- Matrix::rowSums(counts(sce.filtered) >= 1) >=3\nfinal_sce <- sce.filtered[keep,]\nchosen_sce <- final_sce\n\npreqc <- CreateSeuratObject(counts=counts(chosen_sce),  # change this threshold is too high \n                            meta.data=as.data.frame(colData(chosen_sce)),\n                            min.cells = 3, \n                            min.features  = 200, \n                            project = \"whole_muscle_myob\", \n                            assay = \"RNA\")\n\n# Making sure rownames of seurat match most recent sce\na <- rownames(chosen_sce)\nb <- rownames(preqc)\nold <- setdiff(a, b)\nnew <- setdiff(b, a)\n\ntable(old %in% rownames(chosen_sce))\ntable(old %in% rownames(preqc))\nfor (i in seq_along(old)) {\n  rownames(chosen_sce) <- gsub(old[i], new[i], rownames(chosen_sce))\n}\ntable(new %in% rownames(chosen_sce))\ntable(new %in% rownames(preqc))\n\npreqc[[\"percent.mt\"]] <- PercentageFeatureSet(preqc, pattern = \"^MT-\")\npreqc[[\"percent.rb\"]] <- PercentageFeatureSet(preqc, pattern = \"^RP[SL]\")\nVlnPlot(preqc, features = c(\"nFeature_RNA\",\"nCount_RNA\",\"percent.mt\",\"percent.rb\"),ncol = 4,pt.size = 0.1) & \n  theme(plot.title = element_text(size=10))\nplot_1 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\")\nplot_2 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\nplot_3 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"percent.rb\")\nplot_4 <- FeatureScatter(preqc, feature1 = \"percent.rb\", feature2 = \"percent.mt\")\n\nplot_1 + plot_2\nplot_3 + plot_4\n\npostqc <- subset(preqc, \n                subset = nFeature_RNA > 200 & \n                nFeature_RNA < 2350 & \n                percent.mt < 5 &\n                percent.rb < 3)\nVlnPlot(postqc, features = c(\"nFeature_RNA\",\"nCount_RNA\",\"percent.mt\",\"percent.rb\"),ncol = 4,pt.size = 0.1) & \n  theme(plot.title = element_text(size=10))\n\n# Processing --------------------------------------------------------------\n\n# plan(strategy = \"multicore\", workers = 30)\n\nseur_norm <- NormalizeData(postqc)\nseur_norm <- FindVariableFeatures(seur_norm, selection.method = \"vst\")\nseur_norm <- ScaleData(seur_norm, features = rownames(seur_norm))\ns.genes <- cc.genes$s.genes\ng2m.genes <- cc.genes$g2m.genes\nseur_norm <- CellCycleScoring(\n  seur_norm,\n  s.features = s.genes,\n  g2m.features = g2m.genes,\n  set.ident = TRUE\n)\nseur_norm$CC.Difference <- seur_norm$S.Score - seur_norm$G2M.Score\nseur_scaled <- \n  SCTransform(seur_norm, \n            vst.flavor = \"v2\",\n            vars.to.regress = c(\"percent.mt\", \n                                \"nFeature_RNA\", \n                                \"CC.Difference\")) %>%\n  RunPCA(npcs = 50, verbose = FALSE) %>%\n  RunUMAP(reduction = \"pca\", dims = 1:50, verbose = FALSE) %>%\n  FindNeighbors(reduction = \"pca\", dims = 1:50, verbose = FALSE) %>% \n  FindClusters(verbose = TRUE, resolution=seq(0, 1.2, 0.1))\n\ncell_plots <- function(dataset, reduction, grouping){\n  DimPlot(dataset, reduction = reduction, group.by = grouping, label = T)\n}\n\nplots_umap <- list()\n  for(i in paste0(\"SCT_snn_res.\", seq(0, 1.2, 0.1))){\n    plots_umap[[i]] <- cell_plots(seur_scaled, reduction = \"umap\", i)\n}\n# plots_tsne <- list()\n#   for(i in paste0(\"SCT_snn_res.\", seq(0, 1.2, 0.1))){\n#     plots_tsne[[i]] <- cell_plots(post_sct, reduction = \"tsne\", i)\n# }\n\npng(\"clustree_diagram.png\", width = 1000, height = 1000)\n  clustree(seur_scaled, prefix = \"SCT_snn_res.\") +  # chose 0.6\n    theme(legend.position = \"bottom\")\n  # clustree(master, prefix = \"RNA_snn_res.\", node_colour = \"sc3_stability\")\ndev.off()\n\nplots_umap[[\"SCT_snn_res.0\"  ]] \nplots_umap[[\"SCT_snn_res.0.1\"]] \nplots_umap[[\"SCT_snn_res.0.2\"]] \nplots_umap[[\"SCT_snn_res.0.3\"]]\nplots_umap[[\"SCT_snn_res.0.4\"]] \nplots_umap[[\"SCT_snn_res.0.5\"]] \nplots_umap[[\"SCT_snn_res.0.6\"]] \nplots_umap[[\"SCT_snn_res.0.7\"]]\nplots_umap[[\"SCT_snn_res.0.8\"]] \nplots_umap[[\"SCT_snn_res.0.9\"]] \nplots_umap[[\"SCT_snn_res.1\"  ]] \nplots_umap[[\"SCT_snn_res.1.1\"]]\nplots_umap[[\"SCT_snn_res.1.2\"]]\n\nIdents(object = seur_scaled) <- \"SCT_snn_res.0.6\"\n\npng(\"cluster_diagram.png\", width = 500, height = 500)\nDimPlot(seur_scaled, reduction = \"umap\", label=TRUE)\ndev.off()\n\nsaveRDS(seur_scaled, \"data/seur_scaled.rds\")\nseur_scaled <- readRDS(\"data/seur_scaled.rds\")\n\n# Marker genes --------------------------------------------------------------\n# Makes a big feature plot with all the heatmap \n\n# You need to be able to state the gene symbol exactly - list them here\ngenes_of_interest <- c(\n  \"TTN\",\n  \"PAX7\",\n  \"ADIPOQ\",\n  \"MP2\",\n  \"PCAM1\",\n  \"MYHL1\",\n  \"MYH1\",\n  \"DCN\",\n  \"PTPRC\",\n  \"MKX\", \n  \"TNNT1\",\n  \"ANKRD1\",\n  \"MYOZ2\",\n  \"LAMA2\",\n  \"FBXO32\"\n)\n\n# The function below wil return those with an exact match (i.e. one gene withg that name)\naffle <- \n  map(genes_of_interest, ~{\n    rownames(seur_scaled)[grep(paste0(\"^\", .x), rownames(seur_scaled), ignore.case=T)]\n  }) %>%  \n  keep(~ length(.) == 1) %>% \n  list_c()\n\nsetdiff(genes_of_interest, affle)\n\n# The rest of the genes you will have to search for in the dataset with the below line, \n# pick the gene and put in the [previously] unknowns \nrownames(seur_scaled)[grep(paste0(\"^\", \"chrne\"), rownames(seur_scaled), ignore.case=T)]\n\nunknowns <- c(\n  \"TTN\",\n  \"ADIPOR1\",\n  \"ADIPOR2\",\n  \"MYH11\",\n  \"MYH1\"\n)\n\n# This will put all the gene names together saved in a dot images folder\nfinal <- c(unknowns, affle)\n\n# This will make individual heatmaps for each one\nork <-\n  final %>%\n  imap( ~ FeaturePlot(seur_scaled, features = .x, pt.size = 0.35))\nork <- setNames(ork, final)\ndir.create(\"dot_images\")\nork %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"dot_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\n# This will make violin plots for each one saved in a vln images folder\nork_vln <-\n  final %>%\n  imap( ~ VlnPlot(seur_scaled, features = .x))\nork_vln <- setNames(ork_vln, final)\ndir.create(\"vln_images\")\nork_vln %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"vln_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\nall_markers <- FindAllMarkers(seur_scaled, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\nall_markers %>%\n    group_by(cluster) %>%\n    slice_max(n = 20, order_by = avg_log2FC) %>%\n    print(n=Inf)\n\nwrite_csv(all_markers, \"results/wholemuscle_sn_allmarkers.csv\")\nsaveRDS(all_markers, \"data/wholemuscle_sn_allmarkers.rds\")\n\nall_markers %>%\n  filter(cluster == 2) %>%\n  select(gene) %>%\n  write_tsv(\"boops.tsv\")\n\nsaveRDS(seur_scaled, \"data/23-04-20-wm_sn_master_seurat.rds\")"
  },
  {
    "objectID": "single_nuclear.html",
    "href": "single_nuclear.html",
    "title": "Whole muscle single nuclear",
    "section": "",
    "text": "Summary\n\n\nSetup\n\nThe project folder is /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq\nThe raw data is at /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/data/230126_NB501007_0335_AH3K2FAFX5\nAll work for the ‘bash bit’ was potentially done in the qc_env conda environment, or the qc_and_alignment.sif apptainer and the ‘R bit’ was done in the sc_qc conda environment.\nIf the bash bit doesn’t work - remove any commented lines, can get a bit funny with those sometimes.\nThis pipeline deviates from the code used for the single cell alignment, as the previous single cell alignment pipeline based on the pipeline proposed by the McCarrol lab did not account for intronic reads and was inflexible with regards to multi-mapping reads.\n\n\n\n‘Bash bit’\n\nThe file for the bash bit is located at /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/src/solo_alignment_trimR2only.sh.\n\n\n \ncd /scratch/moh1u21/23-01-05-single_nuclear\n\necho $PATH | sed 's/:/\\n/g' | sort | uniq -c\ntoday=$(date +\"%Y-%m-%d\")\n\n# Set up project folders and environmental variables\n\nproject_folder=/scratch/moh1u21/23-01-05-single_nuclear\n# genomedir=/Users/fluentin44/Documents/22-05-15-index_genome/genome_index_hg19 \ngenomedir=/scratch/moh1u21/22-05-15-index_genome/hg19_ensembl\n\nmkdir -p \"$project_folder\"/results/logs\nmkdir -p \"$project_folder\"/results/raw/solo_output\nmkdir -p \"$project_folder\"/results/raw/fastqs\nmkdir -p \"$project_folder\"/results/raw/fastqc\nmkdir -p \"$project_folder\"/results/raw/multiqc\nmkdir -p \"$project_folder\"/results/raw/trimmed\nmkdir -p \"$project_folder\"/results/raw/final_fqs\nmkdir -p \"$project_folder\"/results/raw/fastp_reports\n\nfastp_logfile=results/logs/fastp_log.txt\nstar_logfile=results/logs/star_log.txt\n\n# tmpdir=\"$project_folder\"/tmp_dir\nsolo_folder=\"$project_folder\"/results/raw/solo_output\n\n# fastqc data/full_reads/*_2.fastq \\\n# -o results/solo_folder/fastqcs/pre-trim/fastqc_reports/\n\n# Do an initial QC of the reads\n\nfastqc /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/*.fastq.gz \\\n-o results/raw/fastqc/ \\\n-t 60 \\\n--contaminants /scratch/moh1u21/ATAC_seq_test/data/adapters.txt\n\nmultiqc results/raw/fastqc/ \\\n-o results/raw/multiqc/ \\\n-n multiqc_pre_trim\n\n# Cycle though the files to do a trim of read 2 (read one is index etc, not aligned and would be detrimental. to lose any info)\nid=$(ls /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs)\n\narr=($id)\n# Get central bit of filename\narr_names=()\nfor i in \"${arr[@]}\"\ndo\n    arr_names+=(\"$(echo $i | cut -d'_' -f 1-3)\")\ndone\ndeclare -p arr_names\n\n# Get only the unique filenames\nnewArr=(); \nwhile IFS= read -r -d '' x; \ndo newArr+=(\"$x\"); \ndone < <(printf \"%s\\0\" \"${arr_names[@]}\" | sort -uz)\ndeclare -p newArr\n\nfor i in ${newArr[@]}\ndo\n\nfastp \\\n-w 16 \\\n-p \\\n-Q \\\n-l 50 \\\n-i /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/${i}_2.fastq.gz \\\n-o results/raw/trimmed/trimmed_${i}_2.fastq.gz \\\n--adapter_sequence=AGCAGTGGTATCAACGCAGAGTGAATGGG \\\n--adapter_fasta /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/data/adapters.fasta \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results/raw/fastp_reports/trimmed_${i}_fastp_report.html \\\n--json results/raw/fastp_reports/trimmed_${i}_fastp_report.json >> $fastp_logfile 2>&1\n\n# fastP will remove and reads in the R2 file with too low a quality, which will leave the partner read in R1 \nseqkit pair \\\n--read1 /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/${i}_1.fastq.gz \\\n--read2 \"$project_folder\"/results/raw/trimmed/trimmed_${i}_2.fastq.gz \\\n--out-dir \"$project_folder\"/results/raw/final_fqs\n\ndone \n\nfastqc results/raw/final_fqs/*.fastq.gz \\\n-o results/raw/fastqc/ \\\n-t 60 \\\n--contaminants /scratch/moh1u21/ATAC_seq_test/data/adapters.txt\n\nmultiqc results/raw/fastqc/ \\\n-o results/raw/multiqc/ \\\n-n multiqc_post_trim\n\n\n# id=$(ls results/raw/trimmed)\n\n# arr=($id)\n# # Get central bit of filename\n# arr_names=()\n# for i in \"${arr[@]}\"\n# do\n#   arr_names+=(\"$(echo $i | cut -d'_' -f 1-4)\")\n# done\n# declare -p arr_names\n\n# # Get only the unique filenames\n# newArr=(); \n# while IFS= read -r -d '' x; \n# do newArr+=(\"$x\"); \n# done < <(printf \"%s\\0\" \"${arr_names[@]}\" | sort -uz)\n# declare -p newArr\n\n# mkdir -p results/solo_folder/output/bams\n# mkdir -p results/solo_folder/output/final_logs\n# mkdir -p results/solo_folder/output/other_logs\n\nfor i in ${newArr[@]}\ndo\n\nfastq_1=results/raw/final_fqs/${i}_1.fastq.gz\nfastq_2=results/raw/final_fqs/trimmed_${i}_2.fastq.gz\necho ${fastq_1}\necho ${fastq_2}\n\nSTAR \\\n--runThreadN 60 \\\n--genomeDir ${genomedir} \\\n--outFileNamePrefix ${solo_folder}/sample_${i}_star. \\\n--readFilesIn ${fastq_2} ${fastq_1} \\\n--soloType CB_UMI_Simple \\\n--readFilesCommand zcat \\\n--soloCBwhitelist None \\\n--soloCBstart 1 \\\n--soloCBlen 12 \\\n--soloUMIstart 13 \\\n--soloUMIlen 8 \\\n--soloBarcodeReadLength 0 \\\n--soloStrand Unstranded \\\n--soloCellFilter EmptyDrops_CR 1000 0.99 10 45000 90000 1000 0.01 20000 0.01 10000 \\\n--outSAMattributes All CB UB sM sS sQ uT RG \\\n--outSAMattrRGline ID:${i} SM:${i} \\\n--outSAMtype BAM SortedByCoordinate \\\n--outMultimapperOrder Random \\\n--soloCellReadStats Standard \\\n--soloFeatures Gene GeneFull Velocyto \\\n--soloMultiMappers EM \\\n--outFilterMultimapNmax 10 >> $star_logfile 2>&1\n\n# STAR \\\n# --runThreadN 60 \\\n# --readFilesCommand zcat \\\n# --genomeDir ${genomedir} \\\n# --outFileNamePrefix ${solo_folder}/sample_${i}_star. \\\n# --readFilesIn $fastq_2 $fastq_1 \\\n# --soloType CB_UMI_Simple \\\n# --soloCBstart 1 \\\n# --soloCBlen 12 \\\n# --soloUMIstart 13 \\\n# --soloUMIlen 8 \\\n# --soloCBwhitelist None \\\n# --clipAdapterType CellRanger4 \\\n# --soloBarcodeReadLength  0 \\\n# --soloStrand Unstranded \\\n# --outSAMattributes NH HI nM AS CR UR CB UB sS sQ RG sM \\\n# --outSAMattrRGline ID:${i} SM:${i} \\\n# --outSAMtype BAM SortedByCoordinate \\\n# --outMultimapperOrder Random \\\n# --soloCellFilter  EmptyDrops_CR \\\n# --soloCellReadStats Standard \\\n# --soloFeatures Gene GeneFull Velocyto \\\n# --soloMultiMappers EM \\\n# --outFilterMultimapNmax 10\n\n# mv ${solo_folder}/*.bam ${solo_folder}/output/bams\n# mv ${solo_folder}/*.Log.final.out ${solo_folder}/output/final_logs\n# mv ${solo_folder}/*.Log.out ${solo_folder}/*.Log.progress.out ${solo_folder}/*.SJ.out.tab ${solo_folder}/output/other_logs\n\ndone\n\nmkdir -p \"$project_folder\"/results/raw/solo_output/bams\nmkdir -p \"$project_folder\"/results/raw/solo_output/final_logs\nmkdir -p \"$project_folder\"/results/raw/solo_output/progress_logs\nmkdir -p \"$project_folder\"/results/raw/solo_output/sj_outs\nmkdir -p \"$project_folder\"/results/raw/solo_output/process_logs\nmkdir -p \"$project_folder\"/results/raw/solo_output/results_data\n\nmv  \"$project_folder\"/results/raw/solo_output/*.bam \\\n    \"$project_folder\"/results/raw/solo_output/bams\nmv  \"$project_folder\"/results/raw/solo_output/*.Log.final.out \\\n    \"$project_folder\"/results/raw/solo_output/final_logs\nmv  \"$project_folder\"/results/raw/solo_output/*.Log.progress.out \\\n    \"$project_folder\"/results/raw/solo_output/progress_logs\nmv  \"$project_folder\"/results/raw/solo_output/*.SJ.out.tab \\\n    \"$project_folder\"/results/raw/solo_output/sj_outs\nmv  \"$project_folder\"/results/raw/solo_output/*star.Log.out \\\n    \"$project_folder\"/results/raw/solo_output/process_logs\nmv  \"$project_folder\"/results/raw/solo_output/*star.Solo.out \\\n    \"$project_folder\"/results/raw/solo_output/results_data\n\n# --soloCellFilter EmptyDrops_CR 1000 0.99 10 45000 90000 1000 0.01 20000 0.01 10000 \\\n\n# fastq_1=data/full_reads/WTCHG_928874_CU001_1.fastq\n# fastq_2=data/full_reads/WTCHG_928874_CU001_2.fastq\n# echo ${fastq_1}\n# echo ${fastq_2}\n\n\n\n# STAR \\\n# --runThreadN 60 \\\n# --genomeDir ${genomedir} \\\n# --outFileNamePrefix ${solo_folder}/sample_CU001_star. \\\n# --readFilesIn ${fastq_2} ${fastq_1} \\\n# --soloType CB_UMI_Simple \\\n# --soloCBwhitelist None \\\n# --soloCBstart 1 \\\n# --soloCBlen 12 \\\n# --soloUMIstart 13 \\\n# --soloUMIlen 8 \\\n# --soloBarcodeReadLength 0 \\\n# --soloStrand Unstranded \\\n# --clipAdapterType CellRanger4 \\\n# --soloCellFilter EmptyDrops_CR \\\n# --outSAMattributes All RG \\\n# --outSAMattrRGline ID:CU001 SM:CU001 \\\n# --outSAMtype BAM SortedByCoordinate \\\n# --outMultimapperOrder Random \\\n# --soloCellReadStats Standard \\\n# --soloFeatures Gene GeneFull Velocyto \\\n# --soloMultiMappers EM \\\n# --outFilterMultimapNmax 10\n\n\n\n‘R bit’\n\nThe below script is at /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/src/whole_muscle_dsn_qc.R\nIve saved a number of objects along the way, so you shouldnt have to run the whole thing again and again, and i’d advise you not to as it may change slightly each time, or over time.\nNote - the final Seurat object does not exclude doublets (of which there were not many - have been documented in csv files produced along the way) and background contamination (again few cells with significant contamination) - ideally would have done so but ran out of time. This diverges from what may be typically expected and the next person to take on this code may wish to carry on in this vein.\nNote - a threshold of 4.5 was chosen for single nuclear as graphs showed samples with high mitochondrial gene expression also with high read count, indicating should not necessarily be removed.\n\n\nsuppressPackageStartupMessages(library(DropletUtils))\nsuppressPackageStartupMessages(library(reticulate))\nsuppressPackageStartupMessages(library(singleCellTK))\nsuppressPackageStartupMessages(library(AnnotationHub))\nsuppressPackageStartupMessages(library(SingleCellExperiment))\nsuppressPackageStartupMessages(library(scater))\nsuppressPackageStartupMessages(library(ensembldb))\nsuppressPackageStartupMessages(library(BiocParallel))\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(patchwork))\nsuppressPackageStartupMessages(library(ggvenn))\nsuppressPackageStartupMessages(library(magrittr))\nsuppressPackageStartupMessages(library(Seurat))\nsuppressPackageStartupMessages(library(clustree))\nsuppressPackageStartupMessages(library(scran))\nsuppressPackageStartupMessages(library(bluster))\n\nset.seed(9816)\n\nbp.params <- MulticoreParam(workers = 40)\n\nstarsolodirs <- dir(\"/scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/results/raw/solo_output/results_data\", full.names=T)\n\nsamples <-\n    c(\"sample_a_178K400\",\n    \"sample_b_178K300\",\n    \"sample_c_178K200\",\n    \"sample_d_259K400\",\n    \"sample_e_259K300\",\n    \"sample_h_12K112\")\n\n# saveRDS(data/bibs.rds)\n# bibs <- readRDS(\"data/bibs.rds\")\n\nbibs <- \nimportSTARsolo(\n  starsolodirs,\n  samples,\n  STARsoloOuts = \"GeneFull/raw\",\n  matrixFileNames = \"UniqueAndMult-EM.mtx\",\n  featuresFileNames = \"features.tsv\",\n  barcodesFileNames = \"barcodes.tsv\",\n  gzipped = \"auto\",\n  class = c(\"Matrix\", \"matrix\"),\n  delayedArray = FALSE,\n  rowNamesDedup = TRUE\n)\n\nbibs_qcd <- \n  runBarcodeRankDrops(\n    bibs,\n    sample = colData(bibs)$sample,\n    useAssay = \"counts\",\n    lower = 500,\n    fitBounds = NULL,\n    df = 20\n  )\n\nplots <- \n  plotBarcodeRankScatter(\n    bibs_qcd,\n    sample = colData(bibs_qcd)$sample,\n    defaultTheme = FALSE,\n    dotSize = 0.5,\n    title = NULL,\n    titleSize = 12,\n    xlab = NULL,\n    ylab = NULL,\n    axisSize = 12,\n    axisLabelSize = 15,\n    legendSize = 10,\n    combinePlot = \"all\",\n    sampleRelHeights = 1,\n    sampleRelWidths = 1\n  )\n\n# # adjust to add titles to plots\n# plots <- flatten(plots)\n# plots[[1]] + labs(title=\"Plot of length \\n by dose\")\n# gridExtra::grid.arrange(grobs=plots, ncol=3)\n\nbibs_qcd <- \n  runEmptyDrops(\n    bibs_qcd,\n    lower = 500,\n    sample = colData(bibs)$sample,\n    retain = 1000\n    # BPPARAM = bp.params\n  )\n\ntable(duplicated(rownames(bibs_qcd)))\nrownames(bibs_qcd) <- scuttle::uniquifyFeatureNames(rownames(bibs_qcd), rowData(bibs_qcd)$feature_name)\nrowData(bibs_qcd)$updated_feature_name <- rownames(bibs_qcd)\ntable(duplicated(rownames(bibs_qcd)))\n# saveRDS(bibs_qcd, \"data/bibs_qcd.rds\")\nbibs_qcd <- readRDS(\"data/bibs_qcd.rds\")\n\nbibs_ed <- bibs_qcd \n\n# abbles <-  \n# runDropletQC(\n#   bibs,\n#   algorithms = c(\"QCMetrics\", \"emptyDrops\", \"barcodeRanks\"),\n#   sample = colData(bibs)$sample,\n#   useAssay = \"counts\",\n#   paramsList = NULL\n# )\n\n\n# Testing whether emptyDrops is sound -------------------------------------\n\nset.seed(100)\nall.out <- emptyDrops(counts(bibs), lower=500, retain=1000, test.ambient=TRUE)\nhist(all.out$PValue[all.out$Total <= 500 & all.out$Total > 0],\n     xlab=\"P-value\", main=\"\", col=\"grey80\") \n\nmean(all.out$PValue[all.out$Total <= 500 & all.out$Total > 0] <= 0.05)\n\n# is.cell <- abbles$dropletUtils_emptyDrops_fdr <= 0.001\n# sum(is.cell, na.rm=TRUE)\n\n# saveRDS(bibs_ed, \"empty_dropped_sce.rds\")\n# bibs_ed <- readRDS(\"empty_dropped_sce.rds\")\n\n\n# Plot empty drops results ------------------------------------------------\n\nplotEmptyDropsResults(bibs_ed, sample=bibs_ed$samples)\nsummary(bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001)\ntable(Sig=bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001, Limited=bibs_ed$dropletUtils_emptyDrops_limited)\n\ncolData(bibs_ed) %>%\n  as.data.frame() %>% \n  filter(dropletUtils_emptyDrops_fdr <= 0.001) %>%\n  filter(!is.na(dropletUtils_emptyDrops_fdr)) %>%\n  group_by(sample) %>%\n  summarise(cells=n()) %T>%\n  readr::write_excel_csv(\"results/cellno_per_sample.csv\", col_names=T)\n\nbibs_dropped <- bibs_ed[,which(bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001)]\nbibs_dropped <- bibs_dropped[,!is.na(bibs_dropped$dropletUtils_emptyDrops_fdr)]\n\nis.cell <- bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001\nsum(is.cell, na.rm=TRUE)\n\n# set.seed(12345)\n# bibsy <- runCellQC(bibs_dropped, \n#                    algorithms = c(\n#                      \"QCMetrics\", \n#                      \"scrublet\", \n#                      \"scDblFinder\", \n#                      \"cxds\",\n#                      \"bcds\",\n#                      \"cxds_bcds_hybrid\",\n#                      \"doubletFinder\", \n#                      \"decontX\"\n#                     #  \"soupX\"\n#                    ), \n#                    background=bibs_ed,\n#                    mitoPrefix=\"^MT-\",\n#                    sample = colData(bibs_dropped)$sample\n#                    )\n# \n# # saveRDS(bibsy, \"data/bibsy.rds\")\n# bibsy <- readRDS(\"data/bibsy.rds\")\n# \n# table(colData(bibsy)$scrublet_call)\n# table(colData(bibsy)$scDblFinder_doublet_call)\n# length(which(colData(bibsy)$decontX_contamination < 0.4))\n# \n# hist(colData(bibsy)$decontX_contamination)\n\n\n# # Normalization.\n# set.seed(1234)\n# bibsy_umap <- logNormCounts(bibsy)\n# dec <- modelGeneVar(bibsy_umap)\n# hvg <- getTopHVGs(dec, prop=0.1)\n# bibsy_umap <- runPCA(bibsy_umap, ncomponents=25, subset_row=hvg)\n# colLabels(bibsy_umap) <- clusterCells(bibsy_umap, use.dimred='PCA',\n#     BLUSPARAM=NNGraphParam(cluster.fun=\"louvain\"))    \n# bibsy_umap <- runUMAP(bibsy_umap, dimred = 'PCA')\n# plotUMAP(bibsy_umap, colour_by=\"label\")\n\n\n# oncle <- \n#   plotDecontXResults(\n#     bibsy,\n#     reducedDimName=\"decontX_sample_a_178K400_UMAP\"\n#   )\n\n\n\n# Diagnostic plots --------------------------------------------------------\n\ngenesPerCell <- colSums(counts(bibs_dropped) > 0)\nsummary(genesPerCell)\nplot(density(genesPerCell), main=\"\", xlab=\"Genes per cell\")\n\ntmpCounts <- counts(bibs_dropped)[,1:1000]\n\nplot(rowSums(tmpCounts),\n     rowMeans(tmpCounts > 0),\n     log = \"x\",\n     xlab=\"total number of UMIs\",\n     ylab=\"proportion of cells expressing the gene\"\n)\n\nrm(tmpCounts)\n\nrel_expression <- t( t(counts(bibs_dropped)) / colSums(counts(bibs_dropped))) * 100\nrownames(rel_expression) <- rowData(bibs_dropped)$feature_name\nmost_expressed <- sort(rowSums( rel_expression ),T)[20:1]\nplot_data <- as.matrix(t(rel_expression[names(most_expressed),]))\n\nboxplot(plot_data, cex=0.1, las=1, xlab=\"% total count per cell\", horizontal=TRUE)\n\n# Remove genes with zero expression across cell pop.\ndetected_genes <- rowSums(counts(bibs_dropped)) > 0\ntable(detected_genes)\nbibs_dropped <- bibs_dropped[detected_genes,]\n\n\n# ah <- AnnotationHub()\n# ens.mm.98 <- query(ah, c(\"Homo sapiens\", \"EnsDb\", 98))[[1]] \n\n# genes <- rowData(bibs_dropped)$feature_ID\n# gene_annot <- AnnotationDbi::select(ens.mm.98, \n#                                     keys = genes,\n#                                     keytype = \"GENEID\",\n#                                     columns = c(\"GENEID\", \"SEQNAME\")) %>%\n#     set_names(c(\"ID\", \"Chromosome\"))\n# rowData(bibs_dropped) <- merge(rowData(bibs_dropped), gene_annot, \n#                                 by.x = \"feature_ID\", \n#                                 by.y = \"ID\", \n#                                 all.x=TRUE, \n#                                 sort=FALSE)\n# rownames(rowData(bibs_dropped)) <- rowData(bibs_dropped)$feature_ID\n\n\n# QC ----------------------------------------------------------------------\n\n# Assess number of mitochondrial genes in dataset\njobbo <- bibs_dropped[grep(\"^MT-\",rownames(bibs_dropped)),]\n# jobbo <- rowData(bibs_dropped)[grep(\"^MT\",rowData(bibs_dropped)$Chromosome),]\ntable(rownames(rowData(bibs_dropped)) %in% rownames(jobbo))\n\nhead(rowData(bibs_dropped))\n\n# Tag mito ogenes as mito\nis.mito <- grep(\"^MT-\",rownames(bibs_dropped))\n\n# QC of cells - lib size, features, mito, discard\nsce <- addPerCellQC(bibs_dropped, subsets=list(Mito=is.mito))\ncell_qc_results <- quickPerCellQC(colData(sce), percent_subsets=c(\"subsets_Mito_percent\"))\ncolSums(as.data.frame(cell_qc_results))\n\n# Add qc results back into sce object\nsce$low_lib_size <- cell_qc_results$low_lib_size\nsce$low_n_features <- cell_qc_results$low_n_features\nsce$high_Mito_percent <- cell_qc_results$high_subsets_Mito_percent\nsce$discard <- cell_qc_results$discard\nsce$sn_high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\", min.diff=0.5) # adjustment for snuclear\n\nsummary(sce$subsets_Mito_percent == 0) # Assessing how many cells have zero mito gene expression\n\n# Writing no cells with high mito to csv\ncolData(sce) %>%\n  as.data.frame() %>%\n  filter(sn_high_Mito_percent == TRUE) %>%\n  group_by(sample) %>%\n  summarise(cells=n()) %T>%\n  readr::write_excel_csv(\"results/highmito_per_sample.csv\", col_names=T)\n\n# Comparing sn nuclear adjustrment to isOutlier mito detection\ntable(sce$sn_high_Mito_percent)\ntable(sce$high_Mito_percent)\n\n# sce <- addPerCellQC(bibs_dropped, subsets=list(Mt=grep(\"^MT-\", rownames(bibs_dropped))))\n# summary(sce$subsets_Mt_percent)\n# cell_qc_results <- quickPerCellQC(colData(sce), percent_subsets=c(\"subsets_Mt_percent\"))\n# colSums(as.data.frame(cell_qc_results))\n# sce$high_subsets_Mt_percent <- isOutlier(sce$subsets_Mt_percent, type=\"higher\", min.diff=0.5)\n# cell_qc_results$discard <- Reduce(\"|\", cell_qc_results[,colnames(cell_qc_results)!=\"discard\"])\n# colSums(as.matrix(cell_qc_results))\n\n# plotColData(sce, y=\"subsets_Mt_percent\",\n#     colour_by=I(cell_qc_results$high_subsets_Mt_percent))\n\n\n# MAD thresholds that were chosen for low lib size and features\n\n# low_lib_size <- isOutlier(sce$sum, log=TRUE, type=\"lower\")\n# table(low_lib_size)\nattr(sce$low_lib_size, \"thresholds\")[1]\n# colData(sce)$low_lib_size <- low_lib_size\n\n# low_n_features <- isOutlier(sce$detected, log=TRUE, type=\"lower\")\n# table(low_n_features)\nattr(sce$low_n_features, \"thresholds\")[1]\n# colData(sce)$low_n_features <- low_n_features\n\n# QC plots per sample \ngridExtra::grid.arrange(\n  plotColData(sce, \n              x=\"sample\", \n              y=\"sum\",\n              colour_by = \"low_lib_size\") + \n    scale_y_log10() + \n    labs(y = \"Total count\", title = \"Total count\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n  \n  plotColData(sce, \n              x=\"sample\", \n              y=\"detected\",\n              colour_by = \"low_n_features\") + \n    scale_y_log10() + \n    labs(y = \"Genes detected\", title = \"Genes detected\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n  \n  plotColData(sce, \n              x=\"sum\", \n              y=\"subsets_Mito_percent\", \n              colour_by=\"high_Mito_percent\"),\n  ncol=1\n)\n\n# sn_high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\", min.diff=0.5) # adjustment for snuclear\n# # discard <- Reduce(\"|\", sce[,colnames(sce)!=\"discard\"])\n# # colSums(as.matrix(sce))\n# # high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\")\n# table(sn_high_Mito_percent)\nattr(sce$high_Mito_percent, \"thresholds\")[2]\nattr(sce$sn_high_Mito_percent, \"thresholds\")[2]\n# colData(sce)$sn_high_Mito_percent <- sn_high_Mito_percent\nsummary(sce$high_Mito_percent)\nsummary(sce$sn_high_Mito_percent)\n\ngridExtra::grid.arrange(\nplotColData(sce,  \n            x=\"sample\",\n            y=\"subsets_Mito_percent\",\n            colour_by = \"sn_high_Mito_percent\") + \n  labs(y = \"Percentage mitochondrial UMIs\",\n       title = \"Mitochondrial UMIs\") +\n  guides(colour=guide_legend(title=\"Discarded\")),\n\nplotColData(sce, \n            x=\"sum\", \n            y=\"subsets_Mito_percent\", \n            colour_by=\"sn_high_Mito_percent\"),\nncol=2\n)\n\nmito_thresh <- 4.5\n\ngridExtra::grid.arrange(\n  # Histogram subsets mito percent\n  colData(sce) %>% \n    as.data.frame() %>% \n    ggplot(aes(x=subsets_Mito_percent)) + \n    geom_density(alpha=0.2, fill=\"#00BFC4\", colour=\"#00BFC4\") +\n    scale_x_log10() + \n    geom_vline(xintercept = 0.2) +\n    geom_vline(xintercept=mito_thresh, color=\"#F8766D\", linetype=\"dashed\"),\n  \n  # Visualize the distribution of mitochondrial gene expression detected per cell\n  colData(sce) %>% \n    as.data.frame() %>% \n    ggplot(aes(color=sample, x=subsets_Mito_percent, fill=sample)) + \n    geom_density(alpha = 0.2) + \n    scale_x_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 0.2) +\n    geom_vline(xintercept = mito_thresh, color=\"#F8766D\", linetype=\"dashed\"),\n    \n  ncol=2 \n)\n\ngridExtra::grid.arrange(\n  # Complexity plot\n  colData(sce) %>% \n    as.data.frame() %>%\n    ggplot(aes(x=sum, y=detected, color=subsets_Mito_percent)) + \n    geom_point() + \n    scale_colour_gradient(low = \"gray90\", high = \"black\") +\n    stat_smooth(method=lm) +\n    scale_x_log10() + \n    scale_y_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 500) +\n    geom_hline(yintercept = 250) ,\n  # facet_wrap(~sample)\n\n  plotColData(sce, x=\"sum\", y=\"detected\", colour_by=\"adjusted_discard\"),\n  ncol=2\n)\n\n# adjusting mito threshold\nsce$adjusted_mito_threshold <- \n  data.frame(hmp = sce$subsets_Mito_percent >= mito_thresh) %>%\n  pull(hmp)\n\nsce$adjusted_discard <- \n  data.frame(lls = sce$low_lib_size,\n             lnf = sce$low_n_features,\n             hmp = sce$adjusted_mito_threshold) %>%\n  mutate(adjusted_discard = case_when(\n    if_any(everything(), ~. == TRUE) ~ TRUE, \n    .default=FALSE)) %>%\n  pull(adjusted_discard)\n\n# Checking effect of changed threshold\ntable(discard=sce$discard, adjusted_discard=sce$adjusted_discard)\n## in this case simply reduced the nbumber of discarded to 41\n\n# colData(sce)$sn_high_Mito_percent <- sn_high_Mito_percent\ngridExtra::grid.arrange(\n  plotColData(sce,  \n              x=\"sample\",\n              y=\"subsets_Mito_percent\",\n              colour_by = \"adjusted_discard\") + \n    labs(y = \"Percentage mitochondrial UMIs\",\n        title = \"Mitochondrial UMIs\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n\n  plotColData(sce, \n              x=\"sum\", \n              y=\"subsets_Mito_percent\", \n              colour_by=\"adjusted_discard\"),\n  ncol=2\n)\n\nsummary(sce$high_Mito_percent)\nsummary(sce$sn_high_Mito_percent)\nsummary(sce$adjusted_mito_threshold)\n\n# Final removed for mito\ncolData(sce) %>%\nas.data.frame() %>%\nfilter(adjusted_mito_threshold == TRUE) %>%\ngroup_by(sample) %>%\nsummarise(cells=n()) %T>%\nreadr::write_excel_csv(\"results/adjustedmito_per_sample.csv\", col_names=T)\n\nsaveRDS(sce, \"data/post_mit_thresh.rds\")\n\n# sce.filtered <- sce[, !sce$discard]\nsce.filtered <- sce[, !sce$adjusted_discard]\ncolData(sce.filtered) <- colData(sce.filtered)[,c(1:8)]\nsce.filtered <- addPerCellQC(sce.filtered)\ncolnames(colData(sce.filtered))\n\ndim(sce)\ndim(sce.filtered)\n# saveRDS(sce.filtered, \"data/sce_filtered.rds\")\nsce.filtered <- readRDS(\"data/sce_filtered.rds\")\n\n# the cell sparsity: for each cell, the proportion of genes that are not detected\n# the gene sparsity: for each gene, the proportion of cells in which it is not detected\n\n# # Sparsity - perhaps a bit harsh\n# sce_sparse <- addPerFeatureQC(sce.filtered)\n# rowData(sce_sparse)\n\n# colData(sce_sparse)$cell_sparsity <- 1 - (colData(sce_sparse)$detected / nrow(sce_sparse))\n# rowData(sce_sparse)$gene_sparsity <- (100 - rowData(sce_sparse)$detected) / 100\n\n# hist(sce_sparse$cell_sparsity, breaks=50, col=\"grey80\", xlab=\"Cell sparsity\", main=\"\")\n# hist(rowData(sce_sparse)$gene_sparsity, breaks=50, col=\"grey80\", xlab=\"Gene sparsity\", main=\"\")\n\n# sce_sparse$sparse_cells <- sce_sparse$cell_sparsity > 0.99\n# table(sce_sparse$sparse_cells)\n\n# min_cells <- 1 - (10 / ncol(sce_sparse))\n# rowData(sce_sparse)$sparse_genes <- rowData(sce_sparse)$gene_sparsity > min_cells\n# table(rowData(sce_sparse)$sparse_genes)\n\n# sce_final <- sce_sparse[, !sce_sparse$sparse_cells]\n# dim(sce_final)\n# sce_final <- sce_final[!rowData(sce_final)$sparse_genes, ]\n# dim(sce_final)\n\nsaveRDS(sce_final, \"post_sceqc_object.rds\")\n\n# Post-qc seurat ----------------------------------------------------------\n\ntable(Matrix::rowSums(counts(sce.filtered) >= 1) >=3)\nkeep <- Matrix::rowSums(counts(sce.filtered) >= 1) >=3\nfinal_sce <- sce.filtered[keep,]\nchosen_sce <- final_sce\n\npreqc <- CreateSeuratObject(counts=counts(chosen_sce),  # change this threshold is too high \n                            meta.data=as.data.frame(colData(chosen_sce)),\n                            min.cells = 3, \n                            min.features  = 200, \n                            project = \"whole_muscle_myob\", \n                            assay = \"RNA\")\n\n# Making sure rownames of seurat match most recent sce\na <- rownames(chosen_sce)\nb <- rownames(preqc)\nold <- setdiff(a, b)\nnew <- setdiff(b, a)\n\ntable(old %in% rownames(chosen_sce))\ntable(old %in% rownames(preqc))\nfor (i in seq_along(old)) {\n  rownames(chosen_sce) <- gsub(old[i], new[i], rownames(chosen_sce))\n}\ntable(new %in% rownames(chosen_sce))\ntable(new %in% rownames(preqc))\n\npreqc[[\"percent.mt\"]] <- PercentageFeatureSet(preqc, pattern = \"^MT-\")\npreqc[[\"percent.rb\"]] <- PercentageFeatureSet(preqc, pattern = \"^RP[SL]\")\nVlnPlot(preqc, features = c(\"nFeature_RNA\",\"nCount_RNA\",\"percent.mt\",\"percent.rb\"),ncol = 4,pt.size = 0.1) & \n  theme(plot.title = element_text(size=10))\nplot_1 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\")\nplot_2 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\nplot_3 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"percent.rb\")\nplot_4 <- FeatureScatter(preqc, feature1 = \"percent.rb\", feature2 = \"percent.mt\")\n\nplot_1 + plot_2\nplot_3 + plot_4\n\npostqc <- subset(preqc, \n                subset = nFeature_RNA > 200 & \n                nFeature_RNA < 2350 & \n                percent.mt < 5 &\n                percent.rb < 3)\nVlnPlot(postqc, features = c(\"nFeature_RNA\",\"nCount_RNA\",\"percent.mt\",\"percent.rb\"),ncol = 4,pt.size = 0.1) & \n  theme(plot.title = element_text(size=10))\n\n# Processing --------------------------------------------------------------\n\n# plan(strategy = \"multicore\", workers = 30)\n\nseur_norm <- NormalizeData(postqc)\nseur_norm <- FindVariableFeatures(seur_norm, selection.method = \"vst\")\nseur_norm <- ScaleData(seur_norm, features = rownames(seur_norm))\ns.genes <- cc.genes$s.genes\ng2m.genes <- cc.genes$g2m.genes\nseur_norm <- CellCycleScoring(\n  seur_norm,\n  s.features = s.genes,\n  g2m.features = g2m.genes,\n  set.ident = TRUE\n)\nseur_norm$CC.Difference <- seur_norm$S.Score - seur_norm$G2M.Score\nseur_scaled <- \n  SCTransform(seur_norm, \n            vst.flavor = \"v2\",\n            vars.to.regress = c(\"percent.mt\", \n                                \"nFeature_RNA\", \n                                \"CC.Difference\")) %>%\n  RunPCA(npcs = 50, verbose = FALSE) %>%\n  RunUMAP(reduction = \"pca\", dims = 1:50, verbose = FALSE) %>%\n  FindNeighbors(reduction = \"pca\", dims = 1:50, verbose = FALSE) %>% \n  FindClusters(verbose = TRUE, resolution=seq(0, 1.2, 0.1))\n\ncell_plots <- function(dataset, reduction, grouping){\n  DimPlot(dataset, reduction = reduction, group.by = grouping, label = T)\n}\n\nplots_umap <- list()\n  for(i in paste0(\"SCT_snn_res.\", seq(0, 1.2, 0.1))){\n    plots_umap[[i]] <- cell_plots(seur_scaled, reduction = \"umap\", i)\n}\n# plots_tsne <- list()\n#   for(i in paste0(\"SCT_snn_res.\", seq(0, 1.2, 0.1))){\n#     plots_tsne[[i]] <- cell_plots(post_sct, reduction = \"tsne\", i)\n# }\n\npng(\"clustree_diagram.png\", width = 1000, height = 1000)\n  clustree(seur_scaled, prefix = \"SCT_snn_res.\") +  # chose 0.6\n    theme(legend.position = \"bottom\")\n  # clustree(master, prefix = \"RNA_snn_res.\", node_colour = \"sc3_stability\")\ndev.off()\n\nplots_umap[[\"SCT_snn_res.0\"  ]] \nplots_umap[[\"SCT_snn_res.0.1\"]] \nplots_umap[[\"SCT_snn_res.0.2\"]] \nplots_umap[[\"SCT_snn_res.0.3\"]]\nplots_umap[[\"SCT_snn_res.0.4\"]] \nplots_umap[[\"SCT_snn_res.0.5\"]] \nplots_umap[[\"SCT_snn_res.0.6\"]] \nplots_umap[[\"SCT_snn_res.0.7\"]]\nplots_umap[[\"SCT_snn_res.0.8\"]] \nplots_umap[[\"SCT_snn_res.0.9\"]] \nplots_umap[[\"SCT_snn_res.1\"  ]] \nplots_umap[[\"SCT_snn_res.1.1\"]]\nplots_umap[[\"SCT_snn_res.1.2\"]]\n\nIdents(object = seur_scaled) <- \"SCT_snn_res.0.6\"\n\npng(\"cluster_diagram.png\", width = 500, height = 500)\nDimPlot(seur_scaled, reduction = \"umap\", label=TRUE)\ndev.off()\n\nsaveRDS(seur_scaled, \"data/seur_scaled.rds\")\nseur_scaled <- readRDS(\"data/seur_scaled.rds\")\n\n# Marker genes --------------------------------------------------------------\n# Makes a big feature plot with all the heatmap \n\n# You need to be able to state the gene symbol exactly - list them here\ngenes_of_interest <- c(\n  \"TTN\",\n  \"PAX7\",\n  \"ADIPOQ\",\n  \"MP2\",\n  \"PCAM1\",\n  \"MYHL1\",\n  \"MYH1\",\n  \"DCN\",\n  \"PTPRC\",\n  \"MKX\", \n  \"TNNT1\",\n  \"ANKRD1\",\n  \"MYOZ2\",\n  \"LAMA2\",\n  \"FBXO32\"\n)\n\n# The function below wil return those with an exact match (i.e. one gene withg that name)\naffle <- \n  map(genes_of_interest, ~{\n    rownames(seur_scaled)[grep(paste0(\"^\", .x), rownames(seur_scaled), ignore.case=T)]\n  }) %>%  \n  keep(~ length(.) == 1) %>% \n  list_c()\n\nsetdiff(genes_of_interest, affle)\n\n# The rest of the genes you will have to search for in the dataset with the below line, \n# pick the gene and put in the [previously] unknowns \nrownames(seur_scaled)[grep(paste0(\"^\", \"chrne\"), rownames(seur_scaled), ignore.case=T)]\n\nunknowns <- c(\n  \"TTN\",\n  \"ADIPOR1\",\n  \"ADIPOR2\",\n  \"MYH11\",\n  \"MYH1\"\n)\n\n# This will put all the gene names together saved in a dot images folder\nfinal <- c(unknowns, affle)\n\n# This will make individual heatmaps for each one\nork <-\n  final %>%\n  imap( ~ FeaturePlot(seur_scaled, features = .x, pt.size = 0.35))\nork <- setNames(ork, final)\ndir.create(\"dot_images\")\nork %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"dot_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\n# This will make violin plots for each one saved in a vln images folder\nork_vln <-\n  final %>%\n  imap( ~ VlnPlot(seur_scaled, features = .x))\nork_vln <- setNames(ork_vln, final)\ndir.create(\"vln_images\")\nork_vln %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"vln_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\nall_markers <- FindAllMarkers(seur_scaled, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\nall_markers %>%\n    group_by(cluster) %>%\n    slice_max(n = 20, order_by = avg_log2FC) %>%\n    print(n=Inf)\n\nwrite_csv(all_markers, \"results/wholemuscle_sn_allmarkers.csv\")\nsaveRDS(all_markers, \"data/wholemuscle_sn_allmarkers.rds\")\n\nall_markers %>%\n  filter(cluster == 2) %>%\n  select(gene) %>%\n  write_tsv(\"boops.tsv\")\n\nsaveRDS(seur_scaled, \"data/23-04-20-wm_sn_master_seurat.rds\")"
  },
  {
    "objectID": "conda_envs.html",
    "href": "conda_envs.html",
    "title": "Conda environments",
    "section": "",
    "text": "Conda envs for linux\n\nTo use these conda environments, copy the contents of the chunk into a new .yml file (make a new file and just put .yml on the end).\nYou can then create an environment in conda by using conda env create -n <ENVNAME (you choose)> –file <ENV.yml (file you just saved)>\nNOTE - these environments listed are for linux (Iridis) only - if you wanted to use these elsewhere (mac or pc) you could set the environments up on linux and then use conda env export —from-history><ENV.yml>\nNOTE - sc_qc is big and will take a long time to set itself up.\n\nname: qc_env\nchannels:\n  - conda-forge\n  - bioconda\n  - defaults\n  - bioturing\ndependencies:\n  - _libgcc_mutex=0.1=conda_forge\n  - _openmp_mutex=4.5=2_gnu\n  - _r-mutex=1.0.1=anacondar_1\n  - alsa-lib=1.2.8=h166bdaf_0\n  - binutils_impl_linux-64=2.40=hf600244_0\n  - bioconductor-qckitfastq=1.14.0=r42hc247a5b_0\n  - bioconductor-rseqan=1.18.0=r42hc247a5b_0\n  - bioconductor-seqtools=1.32.0=r42hc0cfd56_0\n  - bioconductor-zlibbioc=1.44.0=r42hc0cfd56_0\n  - biopet-validatefastq=0.1.1=hdfd78af_3\n  - brotli=1.0.9=h5eee18b_7\n  - brotli-bin=1.0.9=h5eee18b_7\n  - brotlipy=0.7.0=py310h7f8727e_1002\n  - bwidget=1.9.14=ha770c72_1\n  - bzip2=1.0.8=h7b6447c_0\n  - c-ares=1.18.1=h7f8727e_0\n  - ca-certificates=2022.12.7=ha878542_0\n  - cairo=1.16.0=hb05425b_3\n  - certifi=2022.12.7=pyhd8ed1ab_0\n  - cffi=1.15.1=py310h5eee18b_3\n  - charset-normalizer=2.1.1=pyhd8ed1ab_0\n  - click=8.1.3=unix_pyhd8ed1ab_2\n  - coloredlogs=15.0.1=py310h06a4308_1\n  - colormath=3.0.0=py_2\n  - contourpy=1.0.7=py310hdf3cbec_0\n  - cryptography=39.0.0=py310h65dfdc0_0\n  - curl=7.87.0=h6312ad2_0\n  - cutadapt=4.2=py310h1425a21_0\n  - cycler=0.11.0=pyhd3eb1b0_0\n  - dnaio=0.10.0=py310h1425a21_0\n  - expat=2.5.0=h27087fc_0\n  - fastp=0.23.2=h5f740d0_3\n  - fastqc=0.11.9=hdfd78af_1\n  - flit-core=3.8.0=pyhd8ed1ab_0\n  - font-ttf-dejavu-sans-mono=2.37=hd3eb1b0_0\n  - font-ttf-inconsolata=3.000=h77eed37_0\n  - font-ttf-source-code-pro=2.038=h77eed37_0\n  - font-ttf-ubuntu=0.83=h8b1ccd4_0\n  - fontconfig=2.14.2=h14ed4e7_0\n  - fonts-anaconda=1=h8fa9717_0\n  - fonts-conda-ecosystem=1=hd3eb1b0_0\n  - fonttools=4.38.0=py310h5764c6d_1\n  - freetype=2.12.1=h4a9f257_0\n  - fribidi=1.0.10=h7b6447c_0\n  - future=0.18.3=pyhd8ed1ab_0\n  - gcc_impl_linux-64=12.2.0=hcc96c02_19\n  - gdbm=1.18=hd4cb3f1_4\n  - gettext=0.21.1=h27087fc_0\n  - gfortran_impl_linux-64=12.2.0=h55be85b_19\n  - giflib=5.2.1=h5eee18b_1\n  - glib=2.74.1=h6239696_1\n  - glib-tools=2.74.1=h6239696_1\n  - graphite2=1.3.14=h295c915_1\n  - gsl=2.7.1=h6e86dc7_1\n  - gxx_impl_linux-64=12.2.0=hcc96c02_19\n  - harfbuzz=6.0.0=h8e241bc_0\n  - htslib=1.16=h6bc39ce_0\n  - humanfriendly=10.0=py310h06a4308_1\n  - icu=70.1=h27087fc_0\n  - idna=3.4=py310h06a4308_0\n  - isa-l=2.30.0=ha770c72_4\n  - jinja2=3.1.2=py310h06a4308_0\n  - jpeg=9e=h7f8727e_0\n  - kernel-headers_linux-64=2.6.32=he073ed8_15\n  - keyutils=1.6.1=h166bdaf_0\n  - kiwisolver=1.4.4=py310h6a678d5_0\n  - krb5=1.20.1=hf9c8cef_0\n  - lcms2=2.14=h6ed2654_0\n  - ld_impl_linux-64=2.40=h41732ed_0\n  - lerc=4.0.0=h27087fc_0\n  - libblas=3.9.0=16_linux64_openblas\n  - libbrotlicommon=1.0.9=h5eee18b_7\n  - libbrotlidec=1.0.9=h5eee18b_7\n  - libbrotlienc=1.0.9=h5eee18b_7\n  - libcblas=3.9.0=16_linux64_openblas\n  - libcups=2.3.3=h36d4200_3\n  - libcurl=7.87.0=h6312ad2_0\n  - libdeflate=1.13=h166bdaf_0\n  - libedit=3.1.20221030=h5eee18b_0\n  - libev=4.33=h7f8727e_1\n  - libffi=3.4.2=h6a678d5_6\n  - libgcc-devel_linux-64=12.2.0=h3b97bd3_19\n  - libgcc-ng=12.2.0=h65d4601_19\n  - libgfortran-ng=12.2.0=h69a702a_19\n  - libgfortran5=12.2.0=h337968e_19\n  - libglib=2.74.1=h606061b_1\n  - libgomp=12.2.0=h65d4601_19\n  - libiconv=1.17=h166bdaf_0\n  - liblapack=3.9.0=16_linux64_openblas\n  - libnghttp2=1.51.0=hdcd2b5c_0\n  - libnsl=2.0.0=h5eee18b_0\n  - libopenblas=0.3.21=h043d6bf_0\n  - libpng=1.6.39=h753d276_0\n  - libsanitizer=12.2.0=h46fd767_19\n  - libsqlite=3.40.0=h753d276_0\n  - libssh2=1.10.0=h8f2d780_0\n  - libstdcxx-devel_linux-64=12.2.0=h3b97bd3_19\n  - libstdcxx-ng=12.2.0=h46fd767_19\n  - libtiff=4.4.0=h0e0dad5_3\n  - libuuid=2.32.1=h7f98852_1000\n  - libwebp=1.2.4=h11a3e52_0\n  - libwebp-base=1.2.4=h5eee18b_0\n  - libxcb=1.15=h7f8727e_0\n  - libxml2=2.10.3=h7463322_0\n  - libzlib=1.2.13=h166bdaf_4\n  - lz4-c=1.9.4=h6a678d5_0\n  - lzstring=1.0.4=py_1001\n  - make=4.3=hd18ef5c_1\n  - markdown=3.4.1=py310h06a4308_0\n  - markdown-it-py=2.1.0=py310h06a4308_0\n  - markupsafe=2.1.2=py310h1fa729e_0\n  - matplotlib-base=3.6.3=py310he60537e_0\n  - mdurl=0.1.0=py310h06a4308_0\n  - multiqc=1.14=pyhdfd78af_0\n  - munkres=1.1.4=py_0\n  - ncurses=6.4=h6a678d5_0\n  - networkx=3.0=pyhd8ed1ab_0\n  - numpy=1.24.1=py310h8deb116_0\n  - openjdk=8.0.332=h166bdaf_0\n  - openssl=1.1.1t=h0b41bf4_0\n  - packaging=23.0=pyhd8ed1ab_0\n  - pandoc=2.19.2=h32600fe_1\n  - pango=1.50.12=hd33c08f_1\n  - pbzip2=1.1.13=0\n  - pcre2=10.40=hc3806b6_0\n  - perl=5.34.0=h5eee18b_2\n  - picard=2.27.5=hdfd78af_0\n  - pigz=2.6=h27cfd23_0\n  - pillow=9.3.0=py310hace64e9_1\n  - pip=23.0=pyhd8ed1ab_0\n  - pixman=0.40.0=h7f8727e_1\n  - pycparser=2.21=pyhd3eb1b0_0\n  - pygments=2.14.0=pyhd8ed1ab_0\n  - pyopenssl=23.0.0=pyhd8ed1ab_0\n  - pyparsing=3.0.9=py310h06a4308_0\n  - pysocks=1.7.1=py310h06a4308_0\n  - python=3.10.8=h257c98d_0_cpython\n  - python-dateutil=2.8.2=pyhd3eb1b0_0\n  - python-isal=1.1.0=py310h5764c6d_1\n  - python_abi=3.10=3_cp310\n  - pyyaml=6.0=py310h5eee18b_1\n  - r-askpass=1.1=r42h06615bd_3\n  - r-assertthat=0.2.1=r42hc72bb7e_3\n  - r-base=4.2.2=h6b4767f_2\n  - r-base64enc=0.1_3=r42h06615bd_1005\n  - r-bit=4.0.5=r42h06615bd_0\n  - r-bit64=4.0.5=r42h06615bd_1\n  - r-bslib=0.4.2=r42hc72bb7e_0\n  - r-cachem=1.0.6=r42h06615bd_1\n  - r-callr=3.7.3=r42hc72bb7e_0\n  - r-cli=3.6.0=r42h38f115c_0\n  - r-clipr=0.8.0=r42hc72bb7e_1\n  - r-colorspace=2.1_0=r42h133d619_0\n  - r-cpp11=0.4.3=r42hc72bb7e_0\n  - r-crayon=1.5.2=r42hc72bb7e_1\n  - r-curl=4.3.3=r42h06615bd_1\n  - r-data.table=1.14.8=r42h133d619_0\n  - r-digest=0.6.31=r42h38f115c_0\n  - r-dplyr=1.1.0=r42h38f115c_0\n  - r-ellipsis=0.3.2=r42h06615bd_1\n  - r-evaluate=0.20=r42hc72bb7e_0\n  - r-fansi=1.0.4=r42h133d619_0\n  - r-farver=2.1.1=r42h7525677_1\n  - r-fastmap=1.1.0=r42h7525677_1\n  - r-fastqcr=0.1.3=r42hc72bb7e_0\n  - r-fs=1.6.1=r42h38f115c_0\n  - r-generics=0.1.3=r42hc72bb7e_1\n  - r-ggplot2=3.4.1=r42hc72bb7e_0\n  - r-glue=1.6.2=r42h06615bd_1\n  - r-gridextra=2.3=r42hc72bb7e_1004\n  - r-gtable=0.3.1=r42hc72bb7e_1\n  - r-highr=0.10=r42hc72bb7e_0\n  - r-hms=1.1.2=r42hc72bb7e_1\n  - r-htmltools=0.5.4=r42h38f115c_0\n  - r-httr=1.4.4=r42hc72bb7e_1\n  - r-isoband=0.2.7=r42h38f115c_1\n  - r-jquerylib=0.1.4=r42hc72bb7e_1\n  - r-jsonlite=1.8.4=r42h133d619_0\n  - r-kableextra=1.3.4=r42hc72bb7e_1\n  - r-knitr=1.42=r42hc72bb7e_1\n  - r-labeling=0.4.2=r42hc72bb7e_2\n  - r-lattice=0.20_45=r42h06615bd_1\n  - r-lifecycle=1.0.3=r42hc72bb7e_1\n  - r-magrittr=2.0.3=r42h06615bd_1\n  - r-mass=7.3_58.2=r42h133d619_0\n  - r-matrix=1.5_3=r42h5f7b363_0\n  - r-memoise=2.0.1=r42hc72bb7e_1\n  - r-mgcv=1.8_41=r42h5f7b363_0\n  - r-mime=0.12=r42h06615bd_1\n  - r-munsell=0.5.0=r42hc72bb7e_1005\n  - r-nlme=3.1_162=r42hac0b197_0\n  - r-openssl=2.0.5=r42hb1dc35e_0\n  - r-pillar=1.8.1=r42hc72bb7e_1\n  - r-pkgconfig=2.0.3=r42hc72bb7e_2\n  - r-plyr=1.8.8=r42h7525677_0\n  - r-prettyunits=1.1.1=r42hc72bb7e_2\n  - r-processx=3.8.0=r42h06615bd_0\n  - r-progress=1.2.2=r42hc72bb7e_3\n  - r-ps=1.7.2=r42h06615bd_0\n  - r-purrr=1.0.1=r42h133d619_0\n  - r-r6=2.5.1=r42hc72bb7e_1\n  - r-rappdirs=0.3.3=r42h06615bd_1\n  - r-rcolorbrewer=1.1_3=r42h785f33e_1\n  - r-rcpp=1.0.10=r42h38f115c_0\n  - r-readr=2.1.4=r42h38f115c_0\n  - r-reshape2=1.4.4=r42h7525677_2\n  - r-rlang=1.0.6=r42h7525677_1\n  - r-rmarkdown=2.20=r42hc72bb7e_0\n  - r-rstudioapi=0.14=r42hc72bb7e_1\n  - r-rvest=1.0.3=r42hc72bb7e_1\n  - r-sass=0.4.5=r42h38f115c_0\n  - r-scales=1.2.1=r42hc72bb7e_1\n  - r-selectr=0.4_2=r42hc72bb7e_2\n  - r-stringi=1.7.12=r42h1ae9187_0\n  - r-stringr=1.5.0=r42h785f33e_0\n  - r-svglite=2.1.1=r42he8f5e61_0\n  - r-sys=3.4.1=r42h06615bd_0\n  - r-systemfonts=1.0.4=r42h0ff29ef_1\n  - r-tibble=3.1.8=r42h06615bd_1\n  - r-tidyr=1.3.0=r42h38f115c_0\n  - r-tidyselect=1.2.0=r42hc72bb7e_0\n  - r-tinytex=0.44=r42hc72bb7e_0\n  - r-tzdb=0.3.0=r42h7525677_1\n  - r-utf8=1.2.3=r42h133d619_0\n  - r-vctrs=0.5.2=r42h38f115c_0\n  - r-viridislite=0.4.1=r42hc72bb7e_1\n  - r-vroom=1.6.1=r42h38f115c_0\n  - r-webshot=0.5.4=r42hc72bb7e_1\n  - r-withr=2.5.0=r42hc72bb7e_1\n  - r-xfun=0.37=r42h38f115c_0\n  - r-xml2=1.3.3=r42h044e5c7_2\n  - r-yaml=2.3.7=r42h133d619_0\n  - readline=8.2=h5eee18b_0\n  - requests=2.28.2=pyhd8ed1ab_0\n  - rich=13.3.1=pyhd8ed1ab_1\n  - rich-click=1.6.1=pyhd8ed1ab_0\n  - samtools=1.16.1=h6899075_1\n  - sed=4.8=h7b6447c_0\n  - seqkit=2.3.1=h9ee0642_0\n  - seqtk=1.3=h7132678_4\n  - setuptools=66.1.1=pyhd8ed1ab_0\n  - simplejson=3.18.1=py310h1fa729e_0\n  - six=1.16.0=pyhd3eb1b0_1\n  - spectra=0.0.11=py_1\n  - sysroot_linux-64=2.12=he073ed8_15\n  - tk=8.6.12=h1ccaba5_0\n  - tktable=2.10=h14c3975_0\n  - trim-galore=0.6.9=hdfd78af_0\n  - trimmomatic=0.39=hdfd78af_2\n  - typing_extensions=4.4.0=py310h06a4308_0\n  - tzdata=2022g=h04d1e81_0\n  - unicodedata2=15.0.0=py310h5eee18b_0\n  - urllib3=1.26.14=py310h06a4308_0\n  - wheel=0.38.4=pyhd8ed1ab_0\n  - xopen=1.7.0=py310hff52083_0\n  - xorg-fixesproto=5.0=h7f98852_1002\n  - xorg-inputproto=2.3.2=h7f98852_1002\n  - xorg-kbproto=1.0.7=h7f98852_1002\n  - xorg-libice=1.0.10=h7f98852_0\n  - xorg-libsm=1.2.3=hd9c2040_1000\n  - xorg-libx11=1.7.2=h7f98852_0\n  - xorg-libxext=1.3.4=h7f98852_1\n  - xorg-libxfixes=5.0.3=h7f98852_1004\n  - xorg-libxi=1.7.10=h7f98852_0\n  - xorg-libxrender=0.9.10=h7f98852_1003\n  - xorg-libxt=1.2.1=h7f98852_2\n  - xorg-libxtst=1.2.3=h7f98852_1002\n  - xorg-recordproto=1.14.2=h7f98852_1002\n  - xorg-renderproto=0.11.1=h7f98852_1002\n  - xorg-xextproto=7.3.0=h7f98852_1002\n  - xorg-xproto=7.0.31=h27cfd23_1007\n  - xz=5.2.10=h5eee18b_1\n  - yaml=0.2.5=h7b6447c_0\n  - zlib=1.2.13=h166bdaf_4\n  - zstandard=0.19.0=py310hdeb6495_1\n  - zstd=1.5.2=ha4553b6_0\nprefix: /home/moh1u21/.conda/envs/qc_env\nname: sc_qc\nchannels:\n  - conda-forge\n  - bioconda\n  - defaults\n  - bioturing\ndependencies:\n  - _libgcc_mutex=0.1=conda_forge\n  - _openmp_mutex=4.5=2_gnu\n  - _r-mutex=1.0.1=anacondar_1\n  - _r-xgboost-mutex=2.0=cpu_0\n  - aom=3.5.0=h27087fc_0\n  - argcomplete=3.0.5=pyhd8ed1ab_0\n  - atk-1.0=2.38.0=hd4edc92_1\n  - binutils_impl_linux-64=2.40=hf600244_0\n  - bioconductor-annotate=1.76.0=r42hdfd78af_0\n  - bioconductor-annotationdbi=1.60.0=r42hdfd78af_0\n  - bioconductor-annotationfilter=1.22.0=r42hdfd78af_0\n  - bioconductor-annotationhub=3.6.0=r42hdfd78af_0\n  - bioconductor-batchelor=1.14.0=r42hc247a5b_0\n  - bioconductor-beachmat=2.14.0=r42hc247a5b_0\n  - bioconductor-biobase=2.58.0=r42hc0cfd56_0\n  - bioconductor-biocfilecache=2.6.0=r42hdfd78af_0\n  - bioconductor-biocgenerics=0.44.0=r42hdfd78af_0\n  - bioconductor-biocio=1.8.0=r42hdfd78af_0\n  - bioconductor-biocneighbors=1.16.0=r42hc247a5b_0\n  - bioconductor-biocparallel=1.32.5=r42hc247a5b_0\n  - bioconductor-biocsingular=1.14.0=r42hc247a5b_0\n  - bioconductor-biocversion=3.16.0=r42hdfd78af_0\n  - bioconductor-biomart=2.54.0=r42hdfd78af_0\n  - bioconductor-biostrings=2.66.0=r42hc0cfd56_0\n  - bioconductor-bluster=1.8.0=r42hc247a5b_0\n  - bioconductor-celda=1.14.0=r42hc247a5b_0\n  - bioconductor-celldex=1.8.0=r42hdfd78af_0\n  - bioconductor-complexheatmap=2.14.0=r42hdfd78af_0\n  - bioconductor-data-packages=20230202=hdfd78af_0\n  - bioconductor-delayedarray=0.24.0=r42hc0cfd56_0\n  - bioconductor-delayedmatrixstats=1.20.0=r42hdfd78af_0\n  - bioconductor-deseq2=1.38.0=r42hc247a5b_0\n  - bioconductor-dropletutils=1.18.0=r42hc247a5b_0\n  - bioconductor-edger=3.40.0=r42hc247a5b_0\n  - bioconductor-ensembldb=2.22.0=r42hdfd78af_0\n  - bioconductor-experimenthub=2.6.0=r42hdfd78af_0\n  - bioconductor-fishpond=2.4.0=r42hdfd78af_0\n  - bioconductor-genefilter=1.80.0=r42h38f54d8_0\n  - bioconductor-geneplotter=1.76.0=r42hdfd78af_0\n  - bioconductor-genomeinfodb=1.34.8=r42hdfd78af_0\n  - bioconductor-genomeinfodbdata=1.2.9=r42hdfd78af_0\n  - bioconductor-genomicalignments=1.34.0=r42hc0cfd56_0\n  - bioconductor-genomicfeatures=1.50.2=r42hdfd78af_0\n  - bioconductor-genomicranges=1.50.0=r42hc0cfd56_0\n  - bioconductor-ggtree=3.6.0=r42hdfd78af_0\n  - bioconductor-glmgampoi=1.10.0=r42hc247a5b_0\n  - bioconductor-graph=1.76.0=r42hc0cfd56_0\n  - bioconductor-gseabase=1.60.0=r42hdfd78af_0\n  - bioconductor-gsva=1.46.0=r42hc0cfd56_0\n  - bioconductor-gsvadata=1.34.0=r42hdfd78af_0\n  - bioconductor-hdf5array=1.26.0=r42h171f361_1\n  - bioconductor-hgu95a.db=3.13.0=r42hdfd78af_2\n  - bioconductor-interactivedisplaybase=1.36.0=r42hdfd78af_0\n  - bioconductor-iranges=2.32.0=r42hc0cfd56_0\n  - bioconductor-keggrest=1.38.0=r42hdfd78af_0\n  - bioconductor-limma=3.54.0=r42hc0cfd56_0\n  - bioconductor-m3drop=1.24.0=r42hdfd78af_0\n  - bioconductor-mast=1.24.0=r42hdfd78af_0\n  - bioconductor-matrixgenerics=1.10.0=r42hdfd78af_0\n  - bioconductor-metapod=1.6.0=r42hc247a5b_0\n  - bioconductor-multtest=2.54.0=r42hc0cfd56_0\n  - bioconductor-org.hs.eg.db=3.16.0=r42hdfd78af_0\n  - bioconductor-protgenerics=1.30.0=r42hdfd78af_0\n  - bioconductor-qvalue=2.30.0=r42hdfd78af_0\n  - bioconductor-residualmatrix=1.8.0=r42hdfd78af_0\n  - bioconductor-rhdf5=2.42.0=r42hbe1951d_1\n  - bioconductor-rhdf5filters=1.10.0=r42hc247a5b_0\n  - bioconductor-rhdf5lib=1.20.0=r42hc0cfd56_0\n  - bioconductor-rhtslib=2.0.0=r42hc0cfd56_0\n  - bioconductor-rsamtools=2.14.0=r42hc247a5b_0\n  - bioconductor-rtracklayer=1.58.0=r42h171f361_1\n  - bioconductor-s4vectors=0.36.0=r42hc0cfd56_0\n  - bioconductor-scaledmatrix=1.6.0=r42hdfd78af_0\n  - bioconductor-scater=1.26.0=r42hdfd78af_0\n  - bioconductor-scdblfinder=1.12.0=r42hdfd78af_0\n  - bioconductor-scds=1.14.0=r42hdfd78af_0\n  - bioconductor-scmerge=1.14.0=r42hdfd78af_0\n  - bioconductor-scran=1.26.0=r42hc247a5b_0\n  - bioconductor-scrnaseq=2.12.0=r42hdfd78af_0\n  - bioconductor-scuttle=1.8.0=r42hc247a5b_0\n  - bioconductor-singlecellexperiment=1.20.0=r42hdfd78af_0\n  - bioconductor-singlecelltk=2.8.0=r42hdfd78af_0\n  - bioconductor-singler=2.0.0=r42hc247a5b_0\n  - bioconductor-sparsematrixstats=1.10.0=r42hc247a5b_0\n  - bioconductor-summarizedexperiment=1.28.0=r42hdfd78af_0\n  - bioconductor-sva=3.46.0=r42hc0cfd56_0\n  - bioconductor-tenxpbmcdata=1.16.0=r42hdfd78af_0\n  - bioconductor-trajectoryutils=1.6.0=r42hdfd78af_0\n  - bioconductor-treeio=1.22.0=r42hdfd78af_0\n  - bioconductor-tscan=1.36.0=r42hdfd78af_0\n  - bioconductor-tximport=1.26.0=r42hdfd78af_0\n  - bioconductor-xvector=0.38.0=r42hc0cfd56_0\n  - bioconductor-zinbwave=1.20.0=r42hdfd78af_0\n  - bioconductor-zlibbioc=1.44.0=r42hc0cfd56_0\n  - blosc=1.21.3=hafa529b_0\n  - brotli=1.0.9=h166bdaf_8\n  - brotli-bin=1.0.9=h166bdaf_8\n  - brotlipy=0.7.0=py310h5764c6d_1005\n  - brunsli=0.1=h9c3ff4c_0\n  - bwidget=1.9.14=ha770c72_1\n  - bzip2=1.0.8=h7f98852_4\n  - c-ares=1.18.1=h7f98852_0\n  - c-blosc2=2.8.0=hf91038e_0\n  - ca-certificates=2022.12.7=ha878542_0\n  - cairo=1.16.0=ha61ee94_1014\n  - certifi=2022.12.7=pyhd8ed1ab_0\n  - cffi=1.15.1=py310h255011f_3\n  - cfitsio=4.2.0=hd9d235c_0\n  - charls=2.4.1=hcb278e6_0\n  - charset-normalizer=2.1.1=pyhd8ed1ab_0\n  - click=8.1.3=unix_pyhd8ed1ab_2\n  - cloudpickle=2.2.1=pyhd8ed1ab_0\n  - colorama=0.4.6=pyhd8ed1ab_0\n  - contourpy=1.0.7=py310hdf3cbec_0\n  - cryptography=39.0.0=py310h65dfdc0_0\n  - curl=7.87.0=h6312ad2_0\n  - cycler=0.11.0=pyhd8ed1ab_0\n  - cython=0.29.33=py310heca2aa9_0\n  - cytoolz=0.12.0=py310h5764c6d_1\n  - dask-core=2023.3.2=pyhd8ed1ab_0\n  - dav1d=1.0.0=h166bdaf_1\n  - expat=2.5.0=h27087fc_0\n  - fftw=3.3.10=nompi_hf0379b8_106\n  - font-ttf-dejavu-sans-mono=2.37=hab24e00_0\n  - font-ttf-inconsolata=3.000=h77eed37_0\n  - font-ttf-source-code-pro=2.038=h77eed37_0\n  - font-ttf-ubuntu=0.83=hab24e00_0\n  - fontconfig=2.14.2=h14ed4e7_0\n  - fonts-conda-ecosystem=1=0\n  - fonts-conda-forge=1=0\n  - fonttools=4.39.3=py310h1fa729e_0\n  - freetype=2.12.1=hca18f0e_1\n  - fribidi=1.0.10=h36c2ea0_0\n  - fsspec=2023.3.0=pyhd8ed1ab_1\n  - gcc_impl_linux-64=12.2.0=hcc96c02_19\n  - gdk-pixbuf=2.42.10=h05c8ddd_0\n  - geos=3.11.2=hcb278e6_0\n  - gettext=0.21.1=h27087fc_0\n  - gfortran_impl_linux-64=12.2.0=h55be85b_19\n  - ghostscript=9.54.0=h27087fc_2\n  - giflib=5.2.1=h0b41bf4_3\n  - glpk=5.0=h445213a_0\n  - gmp=6.2.1=h58526e2_0\n  - graphite2=1.3.13=h58526e2_1001\n  - graphviz=7.1.0=h2e5815a_0\n  - gsl=2.7=he838d99_0\n  - gtk2=2.24.33=h90689f9_2\n  - gts=0.7.6=h64030ff_2\n  - gxx_impl_linux-64=12.2.0=hcc96c02_19\n  - harfbuzz=6.0.0=h8e241bc_0\n  - icu=70.1=h27087fc_0\n  - idna=3.4=pyhd8ed1ab_0\n  - imagecodecs=2023.1.23=py310ha3ed6a1_0\n  - imageio=2.27.0=pyh24c5eb1_0\n  - imagemagick=7.1.1_5=pl5321h211c493_1\n  - importlib-metadata=6.1.0=pyha770c72_0\n  - importlib_metadata=6.1.0=hd8ed1ab_0\n  - jbig=2.1=h7f98852_2003\n  - joblib=1.2.0=pyhd8ed1ab_0\n  - jpeg=9e=h0b41bf4_3\n  - jq=1.6=h36c2ea0_1000\n  - jxrlib=1.1=h7f98852_2\n  - kernel-headers_linux-64=2.6.32=he073ed8_15\n  - keyutils=1.6.1=h166bdaf_0\n  - kiwisolver=1.4.4=py310hbf28c38_1\n  - krb5=1.20.1=hf9c8cef_0\n  - lcms2=2.15=hfd0df8a_0\n  - ld_impl_linux-64=2.40=h41732ed_0\n  - lerc=4.0.0=h27087fc_0\n  - libaec=1.0.6=hcb278e6_1\n  - libavif=0.11.1=h5cdd6b5_0\n  - libblas=3.9.0=16_linux64_openblas\n  - libbrotlicommon=1.0.9=h166bdaf_8\n  - libbrotlidec=1.0.9=h166bdaf_8\n  - libbrotlienc=1.0.9=h166bdaf_8\n  - libcblas=3.9.0=16_linux64_openblas\n  - libcurl=7.87.0=h6312ad2_0\n  - libdeflate=1.17=h0b41bf4_0\n  - libedit=3.1.20191231=he28a2e2_2\n  - libev=4.33=h516909a_1\n  - libffi=3.4.2=h7f98852_5\n  - libgcc-devel_linux-64=12.2.0=h3b97bd3_19\n  - libgcc-ng=12.2.0=h65d4601_19\n  - libgd=2.3.3=h5aea950_4\n  - libgfortran-ng=12.2.0=h69a702a_19\n  - libgfortran5=12.2.0=h337968e_19\n  - libglib=2.74.1=h606061b_1\n  - libgomp=12.2.0=h65d4601_19\n  - libhwloc=2.9.0=hd6dc26d_0\n  - libiconv=1.17=h166bdaf_0\n  - liblapack=3.9.0=16_linux64_openblas\n  - libllvm11=11.1.0=he0ac6c6_5\n  - libnghttp2=1.51.0=hdcd2b5c_0\n  - libnsl=2.0.0=h7f98852_0\n  - libopenblas=0.3.21=pthreads_h78a6416_3\n  - libpng=1.6.39=h753d276_0\n  - librsvg=2.54.4=h7abd40a_0\n  - libsanitizer=12.2.0=h46fd767_19\n  - libsqlite=3.40.0=h753d276_0\n  - libssh2=1.10.0=haa6b8db_3\n  - libstdcxx-devel_linux-64=12.2.0=h3b97bd3_19\n  - libstdcxx-ng=12.2.0=h46fd767_19\n  - libtiff=4.5.0=h6adf6a1_2\n  - libtool=2.4.7=h27087fc_0\n  - libuuid=2.32.1=h7f98852_1000\n  - libv8=8.9.83=h7465d70_2\n  - libwebp=1.2.4=h1daa5a0_1\n  - libwebp-base=1.2.4=h166bdaf_0\n  - libxcb=1.13=h7f98852_1004\n  - libxgboost=1.7.4=cpu_h6e95104_0\n  - libxml2=2.10.3=hca2bb57_4\n  - libzlib=1.2.13=h166bdaf_4\n  - libzopfli=1.0.3=h9c3ff4c_0\n  - llvmlite=0.39.1=py310h58363a5_1\n  - locket=1.0.0=pyhd8ed1ab_0\n  - lz4-c=1.9.4=hcb278e6_0\n  - make=4.3=hd18ef5c_1\n  - matplotlib-base=3.7.1=py310he60537e_0\n  - munkres=1.1.4=pyh9f0ad1d_0\n  - ncurses=6.3=h27087fc_1\n  - networkx=3.0=pyhd8ed1ab_0\n  - numba=0.56.4=py310ha5257ce_0\n  - numpy=1.23.5=py310h53a5b5f_0\n  - oniguruma=6.9.8=h166bdaf_0\n  - openjpeg=2.5.0=hfec8fc6_2\n  - openssl=1.1.1t=h0b41bf4_0\n  - packaging=23.0=pyhd8ed1ab_0\n  - pandas=1.5.3=py310h9b08913_0\n  - pandoc=2.19.2=h32600fe_2\n  - pango=1.50.14=hd33c08f_0\n  - partd=1.3.0=pyhd8ed1ab_0\n  - pcre2=10.40=hc3806b6_0\n  - perl=5.32.1=2_h7f98852_perl5\n  - pillow=9.4.0=py310h023d228_1\n  - pip=23.0.1=pyhd8ed1ab_0\n  - pixman=0.40.0=h36c2ea0_0\n  - pkg-config=0.29.2=h36c2ea0_1008\n  - platformdirs=3.2.0=pyhd8ed1ab_0\n  - pooch=1.7.0=pyha770c72_3\n  - pthread-stubs=0.4=h36c2ea0_1001\n  - pycparser=2.21=pyhd8ed1ab_0\n  - pynndescent=0.5.8=pyh1a96a4e_0\n  - pyopenssl=23.1.1=pyhd8ed1ab_0\n  - pyparsing=3.0.9=pyhd8ed1ab_0\n  - pysocks=1.7.1=pyha2e5f31_6\n  - python=3.10.8=h257c98d_0_cpython\n  - python-annoy=1.17.1=py310hd8f1fbe_0\n  - python-dateutil=2.8.2=pyhd8ed1ab_0\n  - python_abi=3.10=3_cp310\n  - pytz=2023.3=pyhd8ed1ab_0\n  - pywavelets=1.4.1=py310h0a54255_0\n  - pyyaml=6.0=py310h5764c6d_5\n  - r-abind=1.4_5=r42hc72bb7e_1004\n  - r-ape=5.7_1=r42h358215d_0\n  - r-aplot=0.1.10=r42hc72bb7e_0\n  - r-askpass=1.1=r42h06615bd_3\n  - r-assertive.base=0.0_9=r42hc72bb7e_1\n  - r-assertive.files=0.0_2=r42hc72bb7e_1004\n  - r-assertive.numbers=0.0_2=r42hc72bb7e_1004\n  - r-assertive.properties=0.0_5=r42hc72bb7e_1\n  - r-assertive.types=0.0_3=r42hc72bb7e_1005\n  - r-assertthat=0.2.1=r42hc72bb7e_3\n  - r-babelgene=22.9=r42hc72bb7e_1\n  - r-backports=1.4.1=r42h06615bd_1\n  - r-base=4.2.2=ha7d60f8_3\n  - r-base64enc=0.1_3=r42h06615bd_1005\n  - r-bbmle=1.0.25=r42hc72bb7e_1\n  - r-bdsmatrix=1.3_6=r42h06615bd_1\n  - r-beeswarm=0.4.0=r42h06615bd_2\n  - r-bh=1.81.0_1=r42hc72bb7e_0\n  - r-biocmanager=1.30.20=r42hc72bb7e_0\n  - r-bit=4.0.5=r42h06615bd_0\n  - r-bit64=4.0.5=r42h06615bd_1\n  - r-bitops=1.0_7=r42h06615bd_1\n  - r-blob=1.2.4=r42hc72bb7e_0\n  - r-broom=1.0.4=r42hc72bb7e_0\n  - r-bslib=0.4.2=r42hc72bb7e_0\n  - r-cachem=1.0.7=r42h133d619_0\n  - r-cairo=1.6_0=r42h06615bd_1\n  - r-callr=3.7.3=r42hc72bb7e_0\n  - r-catools=1.18.2=r42h7525677_1\n  - r-cellranger=1.1.0=r42hc72bb7e_1005\n  - r-checkmate=2.1.0=r42h06615bd_1\n  - r-circlize=0.4.15=r42hc72bb7e_1\n  - r-cli=3.6.1=r42h38f115c_0\n  - r-clipr=0.8.0=r42hc72bb7e_1\n  - r-clue=0.3_64=r42h133d619_0\n  - r-cluster=2.1.4=r42h8da6f51_0\n  - r-clustree=0.5.0=r42hc72bb7e_1\n  - r-codetools=0.2_19=r42hc72bb7e_0\n  - r-colorspace=2.1_0=r42h133d619_0\n  - r-colourpicker=1.2.0=r42hc72bb7e_0\n  - r-combinat=0.0_8=r42hc72bb7e_1004\n  - r-commonmark=1.9.0=r42h133d619_0\n  - r-conflicted=1.2.0=r42h785f33e_0\n  - r-cowplot=1.1.1=r42hc72bb7e_1\n  - r-cpp11=0.4.3=r42hc72bb7e_0\n  - r-crayon=1.5.2=r42hc72bb7e_1\n  - r-crosstalk=1.2.0=r42hc72bb7e_1\n  - r-curl=4.3.3=r42h06615bd_1\n  - r-data.table=1.14.8=r42h133d619_0\n  - r-dbi=1.1.3=r42hc72bb7e_1\n  - r-dbplyr=2.3.2=r42hc72bb7e_0\n  - r-dbscan=1.1_11=r42h7525677_0\n  - r-deldir=1.0_6=r42h8da6f51_1\n  - r-densestbayes=1.0_2.1=r42h37cf8d7_1\n  - r-desc=1.4.2=r42hc72bb7e_1\n  - r-digest=0.6.31=r42h38f115c_0\n  - r-distr=2.9.1=r42h06615bd_0\n  - r-doparallel=1.0.17=r42hc72bb7e_1\n  - r-dotcall64=1.0_2=r42hac0b197_1\n  - r-dplyr=1.1.1=r42h38f115c_0\n  - r-dqrng=0.3.0=r42h7525677_1\n  - r-dt=0.27=r42hc72bb7e_0\n  - r-dtplyr=1.3.1=r42hc72bb7e_0\n  - r-ellipsis=0.3.2=r42h06615bd_1\n  - r-enrichr=3.1=r42hc72bb7e_1\n  - r-evaluate=0.20=r42hc72bb7e_0\n  - r-fansi=1.0.4=r42h133d619_0\n  - r-farver=2.1.1=r42h7525677_1\n  - r-fastica=1.2_3=r42h5f7b363_1\n  - r-fastmap=1.1.1=r42h38f115c_0\n  - r-fields=14.1=r42hac0b197_1\n  - r-filelock=1.0.2=r42h133d619_1003\n  - r-fitdistrplus=1.1_8=r42hc72bb7e_1\n  - r-fnn=1.1.3.2=r42h38f115c_0\n  - r-fontawesome=0.5.0=r42hc72bb7e_0\n  - r-forcats=1.0.0=r42hc72bb7e_0\n  - r-foreach=1.5.2=r42hc72bb7e_1\n  - r-foreign=0.8_84=r42h133d619_0\n  - r-formatr=1.14=r42hc72bb7e_0\n  - r-formula=1.2_5=r42hc72bb7e_0\n  - r-fs=1.6.1=r42h38f115c_0\n  - r-futile.logger=1.4.3=r42hc72bb7e_1004\n  - r-futile.options=1.0.1=r42hc72bb7e_1003\n  - r-future=1.32.0=r42hc72bb7e_0\n  - r-future.apply=1.10.0=r42hc72bb7e_0\n  - r-gargle=1.3.0=r42h785f33e_0\n  - r-gbrd=0.4_11=r42hc72bb7e_1004\n  - r-generics=0.1.3=r42hc72bb7e_1\n  - r-getoptlong=1.0.5=r42hc72bb7e_1\n  - r-ggbeeswarm=0.7.1=r42hc72bb7e_0\n  - r-ggforce=0.4.1=r42h7525677_1\n  - r-ggfun=0.0.9=r42hc72bb7e_0\n  - r-ggplot2=3.4.1=r42hc72bb7e_0\n  - r-ggplotify=0.1.0=r42hc72bb7e_1\n  - r-ggraph=2.1.0=r42h7525677_1\n  - r-ggrastr=1.0.1=r42hc72bb7e_1\n  - r-ggrepel=0.9.3=r42h38f115c_0\n  - r-ggridges=0.5.4=r42hc72bb7e_1\n  - r-ggvenn=0.1.9=r42hc72bb7e_0\n  - r-globaloptions=0.1.2=r42ha770c72_1\n  - r-globals=0.16.2=r42hc72bb7e_0\n  - r-glue=1.6.2=r42h06615bd_1\n  - r-goftest=1.2_3=r42h06615bd_1\n  - r-googledrive=2.1.0=r42hc72bb7e_0\n  - r-googlesheets4=1.1.0=r42h785f33e_0\n  - r-gplots=3.1.3=r42hc72bb7e_1\n  - r-graphlayouts=0.8.4=r42h7525677_0\n  - r-gridextra=2.3=r42hc72bb7e_1004\n  - r-gridgraphics=0.5_1=r42hc72bb7e_1\n  - r-gtable=0.3.3=r42hc72bb7e_0\n  - r-gtools=3.9.4=r42h06615bd_0\n  - r-haven=2.5.2=r42h38f115c_0\n  - r-here=1.0.1=r42hc72bb7e_1\n  - r-hexbin=1.28.3=r42hac0b197_0\n  - r-highr=0.10=r42hc72bb7e_0\n  - r-hmisc=5.0_1=r42hac0b197_0\n  - r-hms=1.1.3=r42hc72bb7e_0\n  - r-htmltable=2.4.1=r42hc72bb7e_1\n  - r-htmltools=0.5.5=r42h38f115c_0\n  - r-htmlwidgets=1.6.2=r42hc72bb7e_0\n  - r-httpuv=1.6.9=r42h38f115c_0\n  - r-httr=1.4.5=r42hc72bb7e_0\n  - r-ica=1.0_3=r42hc72bb7e_1\n  - r-ids=1.0.1=r42hc72bb7e_2\n  - r-igraph=1.4.1=r42h65ed38e_0\n  - r-inline=0.3.19=r42hc72bb7e_1\n  - r-interp=1.1_3=r42h7525677_1\n  - r-irlba=2.3.5.1=r42h5f7b363_0\n  - r-isoband=0.2.7=r42h38f115c_1\n  - r-iterators=1.0.14=r42hc72bb7e_1\n  - r-jpeg=0.1_10=r42h06615bd_0\n  - r-jquerylib=0.1.4=r42hc72bb7e_1\n  - r-jsonlite=1.8.4=r42h133d619_0\n  - r-kernsmooth=2.23_20=r42hd009a43_1\n  - r-knitr=1.42=r42hc72bb7e_1\n  - r-labeling=0.4.2=r42hc72bb7e_2\n  - r-lambda.r=1.2.4=r42hc72bb7e_2\n  - r-later=1.3.0=r42h7525677_1\n  - r-lattice=0.20_45=r42h06615bd_1\n  - r-latticeextra=0.6_30=r42hc72bb7e_1\n  - r-lazyeval=0.2.2=r42h06615bd_3\n  - r-leiden=0.4.3=r42hc72bb7e_1\n  - r-lifecycle=1.0.3=r42hc72bb7e_1\n  - r-listenv=0.9.0=r42hc72bb7e_0\n  - r-lmtest=0.9_40=r42h8da6f51_1\n  - r-locfit=1.5_9.7=r42h133d619_0\n  - r-loo=2.5.1=r42hc72bb7e_1\n  - r-lsei=1.3_0=r42hc3ea6d6_2\n  - r-lubridate=1.9.2=r42h133d619_1\n  - r-magick=2.7.4=r42h38f115c_0\n  - r-magrittr=2.0.3=r42h06615bd_1\n  - r-maps=3.4.1=r42h06615bd_1\n  - r-mass=7.3_58.3=r42h133d619_0\n  - r-matrix=1.5_3=r42h5f7b363_0\n  - r-matrixstats=0.63.0=r42h06615bd_0\n  - r-mclust=6.0.0=r42hb361e29_0\n  - r-mcmcprecision=0.4.0=r42h9f5de39_3\n  - r-memoise=2.0.1=r42hc72bb7e_1\n  - r-metap=1.1=r42hc72bb7e_3\n  - r-mgcv=1.8_42=r42he1ae0d6_0\n  - r-mime=0.12=r42h06615bd_1\n  - r-miniui=0.1.1.1=r42hc72bb7e_1003\n  - r-modelr=0.1.11=r42hc72bb7e_0\n  - r-msigdbr=7.5.1=r42hc72bb7e_1\n  - r-multipanelfigure=2.1.2=r42hc72bb7e_2\n  - r-munsell=0.5.0=r42hc72bb7e_1005\n  - r-mvtnorm=1.1_3=r42h8da6f51_1\n  - r-nlme=3.1_162=r42hac0b197_0\n  - r-nnet=7.3_18=r42h06615bd_1\n  - r-npsurv=0.5_0=r42hc72bb7e_1\n  - r-numderiv=2016.8_1.1=r42hc72bb7e_4\n  - r-openssl=2.0.5=r42hb1dc35e_0\n  - r-parallelly=1.35.0=r42hc72bb7e_0\n  - r-patchwork=1.1.2=r42hc72bb7e_1\n  - r-pbapply=1.7_0=r42hc72bb7e_0\n  - r-pdist=1.2.1=r42h06615bd_1\n  - r-pheatmap=1.0.12=r42hc72bb7e_3\n  - r-pillar=1.9.0=r42hc72bb7e_0\n  - r-pkgbuild=1.4.0=r42hc72bb7e_0\n  - r-pkgconfig=2.0.3=r42hc72bb7e_2\n  - r-plogr=0.2.0=r42hc72bb7e_1004\n  - r-plotly=4.10.1=r42hc72bb7e_0\n  - r-plyr=1.8.8=r42h7525677_0\n  - r-png=0.1_8=r42h10cf519_0\n  - r-polyclip=1.10_4=r42h7525677_0\n  - r-prettyunits=1.1.1=r42hc72bb7e_2\n  - r-proc=1.18.0=r42h7525677_1\n  - r-processx=3.8.0=r42h06615bd_0\n  - r-progress=1.2.2=r42hc72bb7e_3\n  - r-progressr=0.13.0=r42hc72bb7e_0\n  - r-promises=1.2.0.1=r42h7525677_1\n  - r-proxy=0.4_27=r42h06615bd_1\n  - r-ps=1.7.3=r42h133d619_0\n  - r-purrr=1.0.1=r42h133d619_0\n  - r-r.methodss3=1.8.2=r42hc72bb7e_1\n  - r-r.oo=1.25.0=r42hc72bb7e_1\n  - r-r.utils=2.12.2=r42hc72bb7e_0\n  - r-r6=2.5.1=r42hc72bb7e_1\n  - r-ragg=1.2.5=r42hd65d3ba_0\n  - r-rann=2.6.1=r42h7525677_3\n  - r-rappdirs=0.3.3=r42h06615bd_1\n  - r-rbibutils=2.2.13=r42h133d619_0\n  - r-rcolorbrewer=1.1_3=r42h785f33e_1\n  - r-rcpp=1.0.10=r42h38f115c_0\n  - r-rcppannoy=0.0.20=r42h7525677_0\n  - r-rcpparmadillo=0.11.4.4.0=r42h358215d_0\n  - r-rcppeigen=0.3.3.9.3=r42h9f5de39_0\n  - r-rcpphnsw=0.4.1=r42h7525677_1\n  - r-rcppml=0.3.7=r42h7525677_0\n  - r-rcppparallel=5.1.6=r42h38f115c_0\n  - r-rcppprogress=0.4.2=r42hc72bb7e_2\n  - r-rcpptoml=0.1.7=r42h7525677_2\n  - r-rcurl=1.98_1.10=r42h133d619_0\n  - r-rdpack=2.4=r42hc72bb7e_1\n  - r-readr=2.1.4=r42h38f115c_0\n  - r-readxl=1.4.2=r42h81ef4d7_0\n  - r-reldist=1.7_2=r42hc72bb7e_0\n  - r-rematch=1.0.1=r42hc72bb7e_1005\n  - r-rematch2=2.1.2=r42hc72bb7e_2\n  - r-reprex=2.0.2=r42hc72bb7e_1\n  - r-reshape2=1.4.4=r42h7525677_2\n  - r-restfulr=0.0.15=r42h73dbb54_1\n  - r-reticulate=1.26=r42h7525677_1\n  - r-rgeos=0.6_2=r42h0d5128d_1\n  - r-rjson=0.2.21=r42h7525677_2\n  - r-rlang=1.1.0=r42h38f115c_0\n  - r-rmarkdown=2.21=r42hc72bb7e_0\n  - r-rocr=1.0_11=r42hc72bb7e_2\n  - r-rpart=4.1.19=r42h06615bd_0\n  - r-rprojroot=2.0.3=r42hc72bb7e_1\n  - r-rspectra=0.16_1=r42h9f5de39_1\n  - r-rsqlite=2.3.0=r42h38f115c_0\n  - r-rstan=2.21.7=r42h7525677_1\n  - r-rstantools=2.3.0=r42h38f115c_0\n  - r-rstudioapi=0.14=r42hc72bb7e_1\n  - r-rsvd=1.0.5=r42hc72bb7e_1\n  - r-rtsne=0.16=r42h37cf8d7_1\n  - r-ruv=0.9.7.1=r42h06615bd_2\n  - r-rvest=1.0.3=r42hc72bb7e_1\n  - r-sass=0.4.5=r42h38f115c_0\n  - r-scales=1.2.1=r42hc72bb7e_1\n  - r-scattermore=0.8=r42h06615bd_1\n  - r-sctransform=0.3.5=r42h9f5de39_1\n  - r-selectr=0.4_2=r42hc72bb7e_2\n  - r-seurat=4.3.0=r42h38f115c_0\n  - r-seuratobject=4.1.3=r42h38f115c_0\n  - r-sfsmisc=1.1_14=r42hc72bb7e_0\n  - r-shape=1.4.6=r42ha770c72_1\n  - r-shiny=1.7.4=r42h785f33e_0\n  - r-shinyalert=3.0.0=r42hc72bb7e_1\n  - r-shinycssloaders=1.0.0=r42hc72bb7e_1\n  - r-shinyjs=2.1.0=r42hc72bb7e_1\n  - r-sitmo=2.0.2=r42h7525677_1\n  - r-snow=0.4_4=r42hc72bb7e_1\n  - r-softimpute=1.4_1=r42h8da6f51_1\n  - r-soupx=1.6.2=r42hc72bb7e_0\n  - r-sourcetools=0.1.7_1=r42h38f115c_0\n  - r-sp=1.6_0=r42h133d619_0\n  - r-spam=2.9_1=r42hb20cf53_1\n  - r-spatstat.data=3.0_1=r42hc72bb7e_0\n  - r-spatstat.explore=3.1_0=r42h133d619_0\n  - r-spatstat.geom=3.1_0=r42h133d619_0\n  - r-spatstat.random=3.1_4=r42h38f115c_0\n  - r-spatstat.sparse=3.0_1=r42h133d619_0\n  - r-spatstat.utils=3.0_2=r42h133d619_0\n  - r-stanheaders=2.21.0_7=r42haa30946_1\n  - r-startupmsg=0.9.6=r42hc72bb7e_3\n  - r-statmod=1.5.0=r42h74f4db8_0\n  - r-stringdist=0.9.10=r42h06615bd_0\n  - r-stringi=1.7.12=r42h1ae9187_0\n  - r-stringr=1.5.0=r42h785f33e_0\n  - r-survival=3.5_5=r42h133d619_0\n  - r-svmisc=1.2.3=r42hc72bb7e_1\n  - r-sys=3.4.1=r42h06615bd_0\n  - r-systemfonts=1.0.4=r42h0ff29ef_1\n  - r-tensor=1.5=r42hc72bb7e_1004\n  - r-textshaping=0.3.6=r42hbb20487_4\n  - r-tibble=3.2.1=r42h133d619_1\n  - r-tidygraph=1.2.3=r42h38f115c_0\n  - r-tidyr=1.3.0=r42h38f115c_0\n  - r-tidyselect=1.2.0=r42hc72bb7e_0\n  - r-tidytree=0.4.2=r42hc72bb7e_0\n  - r-tidyverse=2.0.0=r42h785f33e_0\n  - r-timechange=0.2.0=r42h38f115c_0\n  - r-tinytex=0.44=r42hc72bb7e_0\n  - r-tweenr=2.0.2=r42h7525677_1\n  - r-tzdb=0.3.0=r42h7525677_1\n  - r-utf8=1.2.3=r42h133d619_0\n  - r-uuid=1.1_0=r42h06615bd_1\n  - r-uwot=0.1.14=r42h7525677_1\n  - r-v8=4.2.2=r42h125278a_0\n  - r-vam=1.0.0=r42hc72bb7e_1\n  - r-vctrs=0.6.1=r42h38f115c_0\n  - r-vipor=0.4.5=r42hc72bb7e_1004\n  - r-viridis=0.6.2=r42hc72bb7e_1\n  - r-viridislite=0.4.1=r42hc72bb7e_1\n  - r-vroom=1.6.1=r42h38f115c_0\n  - r-withr=2.5.0=r42hc72bb7e_1\n  - r-xfun=0.38=r42h38f115c_0\n  - r-xgboost=1.7.4=cpu_r42h6e95104_0\n  - r-xml=3.99_0.14=r42hb43fdd4_0\n  - r-xml2=1.3.3=r42h044e5c7_2\n  - r-xtable=1.8_4=r42hc72bb7e_4\n  - r-yaml=2.3.7=r42h133d619_0\n  - r-yulab.utils=0.0.6=r42hc72bb7e_0\n  - r-zoo=1.8_11=r42h06615bd_1\n  - readline=8.2=h8228510_1\n  - requests=2.28.2=pyhd8ed1ab_0\n  - scikit-image=0.19.3=py310h769672d_2\n  - scikit-learn=1.2.2=py310h41b6a48_1\n  - scipy=1.10.1=py310h8deb116_0\n  - scrublet=0.2.3=pyh5e36f6f_1\n  - sed=4.8=he412f7d_0\n  - setuptools=67.6.1=pyhd8ed1ab_0\n  - six=1.16.0=pyh6c4a22f_0\n  - snappy=1.1.10=h9fff704_0\n  - sysroot_linux-64=2.12=he073ed8_15\n  - tbb=2021.8.0=hf52228f_0\n  - threadpoolctl=3.1.0=pyh8a188c0_0\n  - tifffile=2023.3.21=pyhd8ed1ab_0\n  - tk=8.6.12=h27826a3_0\n  - tktable=2.10=hb7b940f_3\n  - toml=0.10.2=pyhd8ed1ab_0\n  - toolz=0.12.0=pyhd8ed1ab_0\n  - tqdm=4.65.0=pyhd8ed1ab_1\n  - typing-extensions=4.5.0=hd8ed1ab_0\n  - typing_extensions=4.5.0=pyha770c72_0\n  - tzdata=2023c=h71feb2d_0\n  - umap-learn=0.5.3=py310hff52083_0\n  - unicodedata2=15.0.0=py310h5764c6d_0\n  - urllib3=1.26.15=pyhd8ed1ab_0\n  - wheel=0.40.0=pyhd8ed1ab_0\n  - xmltodict=0.13.0=pyhd8ed1ab_0\n  - xorg-kbproto=1.0.7=h7f98852_1002\n  - xorg-libice=1.0.10=h7f98852_0\n  - xorg-libsm=1.2.3=hd9c2040_1000\n  - xorg-libx11=1.8.4=h0b41bf4_0\n  - xorg-libxau=1.0.9=h7f98852_0\n  - xorg-libxdmcp=1.1.3=h7f98852_0\n  - xorg-libxext=1.3.4=h0b41bf4_2\n  - xorg-libxrender=0.9.10=h7f98852_1003\n  - xorg-libxt=1.2.1=h7f98852_2\n  - xorg-renderproto=0.11.1=h7f98852_1002\n  - xorg-xextproto=7.3.0=h0b41bf4_1003\n  - xorg-xproto=7.0.31=h7f98852_1007\n  - xz=5.2.6=h166bdaf_0\n  - yaml=0.2.5=h7f98852_2\n  - yq=3.1.1=pyhd8ed1ab_0\n  - zfp=1.0.0=h27087fc_3\n  - zipp=3.15.0=pyhd8ed1ab_0\n  - zlib=1.2.13=h166bdaf_4\n  - zlib-ng=2.0.7=h0b41bf4_0\n  - zstd=1.5.2=h3eb15da_6\nprefix: /home/moh1u21/.conda/envs/sc_qc\nname: pseudotime_env\nchannels:\n  - conda-forge\n  - bioconda\n  - defaults\n  - bioturing\ndependencies:\n  - _libgcc_mutex=0.1=conda_forge\n  - _openmp_mutex=4.5=2_gnu\n  - _r-mutex=1.0.1=anacondar_1\n  - binutils_impl_linux-64=2.39=h6ceecb4_0\n  - bioconductor-batchelor=1.10.0=r41hc247a5b_2\n  - bioconductor-beachmat=2.10.0=r41hc247a5b_2\n  - bioconductor-biobase=2.54.0=r41hc0cfd56_2\n  - bioconductor-biocgenerics=0.40.0=r41hdfd78af_0\n  - bioconductor-biocneighbors=1.12.0=r41hc247a5b_2\n  - bioconductor-biocparallel=1.28.3=r41hc247a5b_1\n  - bioconductor-biocsingular=1.10.0=r41hc247a5b_2\n  - bioconductor-delayedarray=0.20.0=r41hc0cfd56_2\n  - bioconductor-delayedmatrixstats=1.16.0=r41hdfd78af_0\n  - bioconductor-edger=3.36.0=r41hc247a5b_2\n  - bioconductor-genomeinfodb=1.30.1=r41hdfd78af_0\n  - bioconductor-genomeinfodbdata=1.2.7=r41hdfd78af_2\n  - bioconductor-genomicranges=1.46.1=r41hc0cfd56_1\n  - bioconductor-hdf5array=1.22.1=r41hc0cfd56_1\n  - bioconductor-iranges=2.28.0=r41hc0cfd56_2\n  - bioconductor-limma=3.50.3=r41hc0cfd56_0\n  - bioconductor-matrixgenerics=1.6.0=r41hdfd78af_0\n  - bioconductor-residualmatrix=1.4.0=r41hdfd78af_0\n  - bioconductor-rhdf5=2.38.1=r41hbe1951d_0\n  - bioconductor-rhdf5filters=1.6.0=r41hc247a5b_2\n  - bioconductor-rhdf5lib=1.16.0=r41hc0cfd56_2\n  - bioconductor-s4vectors=0.32.4=r41hc0cfd56_0\n  - bioconductor-scaledmatrix=1.2.0=r41hdfd78af_0\n  - bioconductor-scater=1.22.0=r41hdfd78af_0\n  - bioconductor-scry=1.6.0=r41hdfd78af_0\n  - bioconductor-scuttle=1.4.0=r41hc247a5b_2\n  - bioconductor-singlecellexperiment=1.16.0=r41hdfd78af_0\n  - bioconductor-slingshot=2.2.0=r41hdfd78af_0\n  - bioconductor-sparsematrixstats=1.6.0=r41hc247a5b_2\n  - bioconductor-summarizedexperiment=1.24.0=r41hdfd78af_0\n  - bioconductor-tradeseq=1.8.0=r41hdfd78af_0\n  - bioconductor-trajectoryutils=1.2.0=r41hdfd78af_0\n  - bioconductor-tscan=1.32.0=r41hdfd78af_0\n  - bioconductor-xvector=0.34.0=r41hc0cfd56_2\n  - bioconductor-zlibbioc=1.40.0=r41hc0cfd56_2\n  - blosc=1.21.1=h83bc5f7_3\n  - boost-cpp=1.78.0=h75c5d50_1\n  - bwidget=1.9.14=ha770c72_1\n  - bzip2=1.0.8=h7b6447c_0\n  - c-ares=1.18.1=h7f8727e_0\n  - ca-certificates=2022.10.11=h06a4308_0\n  - cairo=1.16.0=h19f5f5c_2\n  - cfitsio=4.1.0=hd9d235c_0\n  - curl=7.86.0=h5eee18b_0\n  - expat=2.5.0=h27087fc_0\n  - font-ttf-dejavu-sans-mono=2.37=hd3eb1b0_0\n  - font-ttf-inconsolata=3.000=h77eed37_0\n  - font-ttf-source-code-pro=2.038=h77eed37_0\n  - font-ttf-ubuntu=0.83=h8b1ccd4_0\n  - fontconfig=2.14.1=hc2a2eb6_0\n  - fonts-anaconda=1=h8fa9717_0\n  - fonts-conda-ecosystem=1=hd3eb1b0_0\n  - freetype=2.12.1=h4a9f257_0\n  - freexl=1.0.6=h27cfd23_0\n  - fribidi=1.0.10=h7b6447c_0\n  - gcc_impl_linux-64=12.2.0=hcc96c02_19\n  - geos=3.11.0=h27087fc_0\n  - geotiff=1.7.1=ha76d385_4\n  - gettext=0.21.1=h27087fc_0\n  - gfortran_impl_linux-64=12.2.0=h55be85b_19\n  - giflib=5.2.1=h7b6447c_0\n  - glib=2.74.1=h6239696_0\n  - glib-tools=2.74.1=h6239696_0\n  - glpk=5.0=h445213a_0\n  - gmp=6.2.1=h295c915_3\n  - graphite2=1.3.14=h295c915_1\n  - gsl=2.7.1=h6e86dc7_1\n  - gxx_impl_linux-64=12.2.0=hcc96c02_19\n  - harfbuzz=5.3.0=h418a68e_0\n  - hdf4=4.2.15=h9772cbc_4\n  - hdf5=1.12.2=nompi_h2386368_100\n  - icu=70.1=h27087fc_0\n  - jpeg=9e=h7f8727e_0\n  - json-c=0.16=h5eee18b_0\n  - kealib=1.4.15=ha7026e8_1\n  - kernel-headers_linux-64=2.6.32=he073ed8_15\n  - keyutils=1.6.1=h166bdaf_0\n  - krb5=1.19.3=h3790be6_0\n  - lcms2=2.12=h3be6417_0\n  - ld_impl_linux-64=2.39=hc81fddc_0\n  - lerc=4.0.0=h27087fc_0\n  - libblas=3.9.0=16_linux64_openblas\n  - libcurl=7.86.0=h91b91d3_0\n  - libdap4=3.20.6=hd7c4107_2\n  - libdeflate=1.14=h166bdaf_0\n  - libedit=3.1.20210910=h7f8727e_0\n  - libev=4.33=h7f8727e_1\n  - libffi=3.4.2=h295c915_4\n  - libgcc-devel_linux-64=12.2.0=h3b97bd3_19\n  - libgcc-ng=12.2.0=h65d4601_19\n  - libgdal=3.5.3=hf663712_0\n  - libgfortran-ng=12.2.0=h69a702a_19\n  - libgfortran5=12.2.0=h337968e_19\n  - libglib=2.74.1=h7a41b64_0\n  - libgomp=12.2.0=h65d4601_19\n  - libiconv=1.17=h166bdaf_0\n  - libkml=1.3.0=h37653c0_1015\n  - liblapack=3.9.0=16_linux64_openblas\n  - libnetcdf=4.8.1=nompi_h21705cb_104\n  - libnghttp2=1.47.0=hdcd2b5c_1\n  - libnsl=2.0.0=h5eee18b_0\n  - libopenblas=0.3.21=h043d6bf_0\n  - libpng=1.6.38=h753d276_0\n  - libpq=14.5=hf695f80_2\n  - librttopo=1.1.0=hf730bdb_11\n  - libsanitizer=12.2.0=h46fd767_19\n  - libspatialite=5.0.1=hfbd986c_21\n  - libsqlite=3.39.4=h753d276_0\n  - libssh2=1.10.0=h8f2d780_0\n  - libstdcxx-devel_linux-64=12.2.0=h3b97bd3_19\n  - libstdcxx-ng=12.2.0=h46fd767_19\n  - libtiff=4.4.0=h55922b4_4\n  - libuuid=2.32.1=h7f98852_1000\n  - libwebp-base=1.2.4=h5eee18b_0\n  - libxcb=1.15=h7f8727e_0\n  - libxml2=2.10.3=h7463322_0\n  - libzip=1.9.2=hc869a4a_1\n  - libzlib=1.2.13=h166bdaf_4\n  - lz4-c=1.9.3=h295c915_1\n  - make=4.3=hd18ef5c_1\n  - ncurses=6.3=h5eee18b_3\n  - nspr=4.33=h295c915_0\n  - nss=3.78=h2350873_0\n  - openjpeg=2.5.0=h7d73246_1\n  - openssl=1.1.1s=h7f8727e_0\n  - pandoc=2.19.2=h32600fe_1\n  - pango=1.50.11=h382ae3d_0\n  - pcre=8.45=h295c915_0\n  - pcre2=10.37=he7ceb23_1\n  - pip=22.3=pyhd8ed1ab_0\n  - pixman=0.40.0=h7f8727e_1\n  - poppler=22.10.0=h92391eb_0\n  - poppler-data=0.4.11=h06a4308_0\n  - postgresql=14.5=hdeef612_2\n  - proj=9.1.0=h93bde94_0\n  - python=3.11.0=h582c2e5_0_cpython\n  - r-abind=1.4_5=r41hc72bb7e_1004\n  - r-askpass=1.1=r41h06615bd_3\n  - r-assertthat=0.2.1=r41hc72bb7e_3\n  - r-backports=1.4.1=r41h06615bd_1\n  - r-base=4.1.3=h7880091_3\n  - r-base64enc=0.1_3=r41h06615bd_1005\n  - r-beeswarm=0.4.0=r41h06615bd_2\n  - r-bh=1.78.0_0=r41hc72bb7e_1\n  - r-bitops=1.0_7=r41h06615bd_1\n  - r-boot=1.3_28=r41hc72bb7e_1\n  - r-brio=1.1.3=r41h06615bd_1\n  - r-bslib=0.4.0=r41hc72bb7e_1\n  - r-cachem=1.0.6=r41h06615bd_1\n  - r-callr=3.7.2=r41hc72bb7e_1\n  - r-catools=1.18.2=r41h7525677_1\n  - r-class=7.3_20=r41h06615bd_1\n  - r-classint=0.4_8=r41h8da6f51_0\n  - r-cli=3.4.1=r41h7525677_1\n  - r-cluster=2.1.4=r41h8da6f51_0\n  - r-codetools=0.2_18=r41hc72bb7e_1\n  - r-colorspace=2.0_3=r41h06615bd_1\n  - r-combinat=0.0_8=r41hc72bb7e_1004\n  - r-commonmark=1.8.1=r41h06615bd_0\n  - r-cowplot=1.1.1=r41hc72bb7e_1\n  - r-cpp11=0.4.3=r41hc72bb7e_0\n  - r-crayon=1.5.2=r41hc72bb7e_1\n  - r-crosstalk=1.2.0=r41hc72bb7e_1\n  - r-curl=4.3.3=r41h06615bd_1\n  - r-data.table=1.14.4=r41h06615bd_0\n  - r-dbi=1.1.3=r41hc72bb7e_1\n  - r-deldir=1.0_6=r41h8da6f51_1\n  - r-desc=1.4.2=r41hc72bb7e_1\n  - r-diffobj=0.3.5=r41h06615bd_1\n  - r-digest=0.6.30=r41h7525677_0\n  - r-dplyr=1.0.10=r41h7525677_1\n  - r-dqrng=0.3.0=r41h7525677_1\n  - r-e1071=1.7_12=r41h7525677_0\n  - r-ellipsis=0.3.2=r41h06615bd_1\n  - r-evaluate=0.17=r41hc72bb7e_1\n  - r-fansi=1.0.3=r41h06615bd_1\n  - r-farver=2.1.1=r41h7525677_1\n  - r-fastica=1.2_3=r41h5f7b363_1\n  - r-fastmap=1.1.0=r41h7525677_1\n  - r-fitdistrplus=1.1_8=r41hc72bb7e_1\n  - r-fnn=1.1.3.1=r41h7525677_1\n  - r-fontawesome=0.4.0=r41hc72bb7e_0\n  - r-formatr=1.12=r41hc72bb7e_1\n  - r-fs=1.5.2=r41h7525677_2\n  - r-furrr=0.3.1=r41hc72bb7e_1\n  - r-futile.logger=1.4.3=r41hc72bb7e_1004\n  - r-futile.options=1.0.1=r41hc72bb7e_1003\n  - r-future=1.28.0=r41hc72bb7e_1\n  - r-future.apply=1.9.1=r41hc72bb7e_1\n  - r-generics=0.1.3=r41hc72bb7e_1\n  - r-ggbeeswarm=0.6.0=r41ha770c72_1004\n  - r-ggplot2=3.3.6=r41hc72bb7e_1\n  - r-ggrepel=0.9.1=r41h7525677_1\n  - r-ggridges=0.5.4=r41hc72bb7e_1\n  - r-glmpca=0.2.0=r41hc72bb7e_1\n  - r-globals=0.16.1=r41hc72bb7e_1\n  - r-glue=1.6.2=r41h06615bd_1\n  - r-goftest=1.2_3=r41h06615bd_1\n  - r-gplots=3.1.3=r41hc72bb7e_1\n  - r-gridextra=2.3=r41hc72bb7e_1004\n  - r-grr=0.9.5=r41h7525677_1005\n  - r-gtable=0.3.1=r41hc72bb7e_1\n  - r-gtools=3.9.3=r41h06615bd_1\n  - r-here=1.0.1=r41hc72bb7e_1\n  - r-hexbin=1.28.2=r41h8da6f51_1\n  - r-highr=0.9=r41hc72bb7e_1\n  - r-htmltools=0.5.3=r41h7525677_1\n  - r-htmlwidgets=1.5.4=r41hc72bb7e_1\n  - r-httpuv=1.6.6=r41h7525677_1\n  - r-httr=1.4.4=r41hc72bb7e_1\n  - r-hunspell=3.0.2=r41h7525677_1\n  - r-ica=1.0_3=r41hc72bb7e_1\n  - r-igraph=1.3.5=r41hb34fc8a_0\n  - r-irlba=2.3.5.1=r41h5f7b363_0\n  - r-isoband=0.2.6=r41h7525677_1\n  - r-jquerylib=0.1.4=r41hc72bb7e_1\n  - r-jsonlite=1.8.3=r41h06615bd_0\n  - r-kernsmooth=2.23_20=r41hd009a43_1\n  - r-knitr=1.40=r41hc72bb7e_1\n  - r-labeling=0.4.2=r41hc72bb7e_2\n  - r-lambda.r=1.2.4=r41hc72bb7e_2\n  - r-later=1.2.0=r41h7525677_1\n  - r-lattice=0.20_45=r41h06615bd_1\n  - r-lazyeval=0.2.2=r41h06615bd_3\n  - r-leiden=0.4.3=r41hc72bb7e_1\n  - r-leidenbase=0.1.3=r41h1aed7a7_2\n  - r-lifecycle=1.0.3=r41hc72bb7e_1\n  - r-listenv=0.8.0=r41hc72bb7e_2\n  - r-lmtest=0.9_40=r41h8da6f51_1\n  - r-lobstr=1.1.2=r41h7525677_1\n  - r-locfit=1.5_9.6=r41h06615bd_1\n  - r-lsei=1.3_0=r41hc3ea6d6_2\n  - r-magrittr=2.0.3=r41h06615bd_1\n  - r-mass=7.3_58.1=r41h06615bd_1\n  - r-matrix=1.5_1=r41h5f7b363_0\n  - r-matrix.utils=0.9.8=r41hc72bb7e_2\n  - r-matrixstats=0.62.0=r41h06615bd_1\n  - r-mclust=5.4.10=r41hb361e29_1\n  - r-memoise=2.0.1=r41hc72bb7e_1\n  - r-mgcv=1.8_41=r41h5f7b363_0\n  - r-mime=0.12=r41h06615bd_1\n  - r-miniui=0.1.1.1=r41hc72bb7e_1003\n  - r-modeldata=1.0.1=r41hc72bb7e_1\n  - r-monocle3=1.0.0=r41h9f5acd7_2\n  - r-munsell=0.5.0=r41hc72bb7e_1005\n  - r-nlme=3.1_160=r41h8da6f51_0\n  - r-npsurv=0.5_0=r41hc72bb7e_1\n  - r-openssl=2.0.4=r41hfaab4ff_0\n  - r-parallelly=1.32.1=r41hc72bb7e_1\n  - r-patchwork=1.1.2=r41hc72bb7e_1\n  - r-pbapply=1.5_0=r41hc72bb7e_1\n  - r-pbmcapply=1.5.1=r41h06615bd_1\n  - r-pheatmap=1.0.12=r41hc72bb7e_3\n  - r-pillar=1.8.1=r41hc72bb7e_1\n  - r-pkgconfig=2.0.3=r41hc72bb7e_2\n  - r-pkgload=1.3.0=r41hc72bb7e_1\n  - r-plotly=4.10.0=r41hc72bb7e_1\n  - r-plyr=1.8.7=r41h7525677_1\n  - r-png=0.1_7=r41h06615bd_1005\n  - r-polyclip=1.10_4=r41h7525677_0\n  - r-praise=1.0.0=r41hc72bb7e_1006\n  - r-prettyunits=1.1.1=r41hc72bb7e_2\n  - r-princurve=2.1.6=r41h7525677_1\n  - r-processx=3.8.0=r41h06615bd_0\n  - r-progressr=0.11.0=r41hc72bb7e_1\n  - r-promises=1.2.0.1=r41h7525677_1\n  - r-proxy=0.4_27=r41h06615bd_1\n  - r-pryr=0.1.5=r41h7525677_1\n  - r-ps=1.7.2=r41h06615bd_0\n  - r-pscl=1.5.5=r41h166bdaf_2\n  - r-purrr=0.3.5=r41h06615bd_1\n  - r-r6=2.5.1=r41hc72bb7e_1\n  - r-rann=2.6.1=r41h7525677_3\n  - r-rappdirs=0.3.3=r41h06615bd_1\n  - r-raster=3.5_21=r41h7525677_1\n  - r-rcolorbrewer=1.1_3=r41h785f33e_1\n  - r-rcpp=1.0.9=r41h7525677_2\n  - r-rcppannoy=0.0.19=r41h7525677_1\n  - r-rcpparmadillo=0.11.4.0.1=r41h9f5de39_0\n  - r-rcppeigen=0.3.3.9.2=r41h9f5de39_1\n  - r-rcpphnsw=0.4.1=r41h7525677_1\n  - r-rcppparallel=5.1.5=r41h7525677_1\n  - r-rcppprogress=0.4.2=r41hc72bb7e_2\n  - r-rcpptoml=0.1.7=r41h7525677_2\n  - r-rcurl=1.98_1.9=r41h06615bd_1\n  - r-rematch2=2.1.2=r41hc72bb7e_2\n  - r-reshape2=1.4.4=r41h7525677_2\n  - r-reticulate=1.26=r41h7525677_1\n  - r-rgeos=0.5_9=r41hf730bdb_4\n  - r-rhpcblasctl=0.21_247.1=r41h06615bd_1\n  - r-rlang=1.0.6=r41h7525677_1\n  - r-rmarkdown=2.17=r41hc72bb7e_1\n  - r-rocr=1.0_11=r41hc72bb7e_2\n  - r-rpart=4.1.19=r41h06615bd_0\n  - r-rprojroot=2.0.3=r41hc72bb7e_1\n  - r-rsample=1.1.0=r41hc72bb7e_1\n  - r-rspectra=0.16_1=r41h9f5de39_1\n  - r-rsvd=1.0.5=r41hc72bb7e_0\n  - r-rtsne=0.16=r41h37cf8d7_1\n  - r-s2=1.1.1=r41h438afc9_0\n  - r-sass=0.4.2=r41h7525677_1\n  - r-scales=1.2.1=r41hc72bb7e_1\n  - r-scattermore=0.8=r41h06615bd_1\n  - r-sctransform=0.3.5=r41h9f5de39_1\n  - r-seurat=4.2.0=r41h7525677_0\n  - r-seuratobject=4.1.2=r41h7525677_1\n  - r-sf=1.0_7=r41h25da31b_5\n  - r-shiny=1.7.3=r41h785f33e_0\n  - r-sitmo=2.0.2=r41h7525677_1\n  - r-slam=0.1_50=r41h64d53c3_2\n  - r-slider=0.2.2=r41h06615bd_1\n  - r-snow=0.4_4=r41hc72bb7e_1\n  - r-sourcetools=0.1.7=r41h7525677_1003\n  - r-sp=1.5_0=r41h06615bd_1\n  - r-spatstat.core=2.4_4=r41h7525677_1\n  - r-spatstat.data=3.0_0=r41hc72bb7e_0\n  - r-spatstat.geom=3.0_3=r41h06615bd_0\n  - r-spatstat.random=2.2_0=r41h7525677_1\n  - r-spatstat.sparse=3.0_0=r41h06615bd_0\n  - r-spatstat.utils=3.0_1=r41h06615bd_0\n  - r-spdata=2.2.0=r41hc72bb7e_1\n  - r-spdep=1.2_7=r41h06615bd_1\n  - r-speedglm=0.3_4=r41hc72bb7e_1\n  - r-spelling=2.2=r41hc72bb7e_1\n  - r-stringi=1.7.8=r41h30a9eb7_1\n  - r-stringr=1.4.1=r41hc72bb7e_1\n  - r-survival=3.4_0=r41h06615bd_1\n  - r-sys=3.4.1=r41h06615bd_0\n  - r-tensor=1.5=r41hc72bb7e_1004\n  - r-terra=1.5_21=r41hb287aa1_7\n  - r-testthat=3.1.5=r41h7525677_1\n  - r-tibble=3.1.8=r41h06615bd_1\n  - r-tidyr=1.2.1=r41h7525677_1\n  - r-tidyselect=1.2.0=r41hc72bb7e_0\n  - r-tinytex=0.42=r41hc72bb7e_1\n  - r-units=0.8_0=r41h7525677_1\n  - r-utf8=1.2.2=r41h06615bd_1\n  - r-uwot=0.1.14=r41h7525677_1\n  - r-vctrs=0.5.0=r41h7525677_0\n  - r-vipor=0.4.5=r41hc72bb7e_1004\n  - r-viridis=0.6.2=r41hc72bb7e_1\n  - r-viridislite=0.4.1=r41hc72bb7e_1\n  - r-waldo=0.4.0=r41hc72bb7e_1\n  - r-warp=0.2.0=r41h06615bd_2\n  - r-withr=2.5.0=r41hc72bb7e_1\n  - r-wk=0.7.0=r41h7525677_0\n  - r-xfun=0.34=r41h7525677_0\n  - r-xml2=1.3.3=r41h044e5c7_2\n  - r-xtable=1.8_4=r41hc72bb7e_4\n  - r-yaml=2.3.6=r41h06615bd_0\n  - r-zoo=1.8_11=r41h06615bd_1\n  - readline=8.2=h5eee18b_0\n  - sed=4.8=h7b6447c_0\n  - setuptools=65.5.0=pyhd8ed1ab_0\n  - snappy=1.1.9=h295c915_0\n  - sqlite=3.39.4=h4ff8645_0\n  - sysroot_linux-64=2.12=he073ed8_15\n  - tiledb=2.11.3=h1e4a385_1\n  - tk=8.6.12=h1ccaba5_0\n  - tktable=2.10=h14c3975_0\n  - tzcode=2022e=h166bdaf_0\n  - tzdata=2022e=h04d1e81_0\n  - udunits2=2.2.28=hc3e0081_0\n  - wheel=0.37.1=pyhd3eb1b0_0\n  - xerces-c=3.2.4=h55805fa_1\n  - xorg-kbproto=1.0.7=h7f98852_1002\n  - xorg-libice=1.0.10=h7f98852_0\n  - xorg-libsm=1.2.3=hd9c2040_1000\n  - xorg-libx11=1.7.2=h7f98852_0\n  - xorg-libxt=1.2.1=h7f98852_2\n  - xorg-xproto=7.0.31=h27cfd23_1007\n  - xz=5.2.6=h5eee18b_0\n  - zlib=1.2.13=h166bdaf_4\n  - zstd=1.5.2=ha4553b6_0\nprefix: /home/moh1u21/.conda/envs/pseudotime_env"
  },
  {
    "objectID": "atac_seq.html#for-one-sample-may-be-good-for-testing",
    "href": "atac_seq.html#for-one-sample-may-be-good-for-testing",
    "title": "ATACseq",
    "section": "For one sample (may be good for testing)",
    "text": "For one sample (may be good for testing)\n\n# Set directory\ncd /scratch/moh1u21/ATAC_seq_test\n\necho $PATH | sed 's/:/\\n/g' | sort | uniq -c\ntoday=$(date +\"%Y-%m-%d\")\n\n# Set environmental variables and make necessary folders\nproject_folder=/scratch/moh1u21/ATAC_seq_test\ngenomedir=/scratch/moh1u21/ATAC_seq_test/GRCh37 \n\nmkdir -p results_test/reports/fastp\nmkdir -p results_test/reports/fastqc\nmkdir -p results_test/reports/multiqc\nmkdir -p results_test/logs\nmkdir -p data_test/trimmed\n\nfastp_logfile=results_test/logs/test_fastp_log.txt\n\n# 1. QC - Fastq and multiQC - chance to look at initial quality of reads\nfastqc data_test/test_files/*.fastq.gz \\\n-o results_test/reports/fastqc \\\n-t 60 \n\nmultiqc results_test/reports/fastqc \\\n-o results_test/reports/multiqc/ \\\n-n test_multiqc_pre_trim\n\n# 2. Adapter removal and deduplication\n## 2.1. FastP will trim your reads - see how well it does on 'automatic mode', but you may have to. supply your adapter sequnces\nfastp \\\n-w 16 \\\n-p \\\n--length_required 50 \\\n-i data_test/test_files/SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_1.fastq.gz \\\n-I data_test/test_files/SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_2.fastq.gz \\\n-o data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_1.fastq.gz \\\n-O data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_2.fastq.gz \\\n--correction \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results_test/reports/fastp/trimmed_fastp_report.html \\\n--json results_test/reports/fastp/trimmed_fastp_report.json > $fastp_logfile 2>&1\n\n# QC \nfastqc data_test/test_files/trimmed/*.fastq.gz \\\n-o results_test/reports/fastqc/ \\\n-t 60 \n# --contaminants data/adapters.txt\n\nmultiqc results_test/reports/fastqc/ \\\n-o results_test/reports/multiqc/ \\\n-n multiqc_post_trim\n\n# 3. Align \n## 3.1. Load genome - we are using a prebuilt so doesnt need to be done \n# bowtie2-build  <genome.fa>  <genomeIndexName>\n\n# # ls data/test_files | cut -d\"_\" -f1-2 | sort | uniq > filenames.txt\n# cat fast_files.txt | parallel \\\n#     fastp \\\n#     -i {}_1.fastq -o {}_1.trimmed.fq \\\n#     -I {}_2.fastq -O {}_2.trimmed.fq \\\n#     --max_len1 20 \\\n#     --max_len2 20\n\n## 3.2. Align\n\n# cat fast_files.txt | parallel \\\nbowtie2 --very-sensitive \\\n -q \\\n -x /scratch/moh1u21/ATAC_seq_test/GRCh37/GRCh37 \\\n -1 data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_1.fastq.gz \\\n -2 data_test/trimmed/trimmed_SRR23641128_GSM7070986_ATAC_DMSO_1_Homo_sapiens_ATAC-seq_2.fastq.gz \\\n -S test_aligned.sam 2>> bt2log_test_aligned.log\n \n#  | samtools view -@ 60 -Shu - \\\n#  | samtools sort - -O {}_aligned.bam '>>' bw2_alignment.txt '2>&1'\n\n# cat fast_files.txt | parallel \\\nsamtools view -h -S -b test_aligned.sam -o test_aligned.bam \n\n# # 4. Remove MTs\n# samtools view -h  <inBAM>  |  removeChrom - - chrM  |  samtools view -b -  >  <outBAM>\n\n# # 5. Deduplicate \n# java -jar $PICARD_TOOLS_HOME/picard.jar MarkDuplicates I=<inBAM> O=<outBAM> M=dups.txt REMOVE_DUPLICATES=true\n\n# # 6. Remove non-uniques\n# samtools view -b  -q 10  <inBAM>  >  <outBAM>\n\n# # 7. Peak calling\n# module load ATAC-seq\n# samtools view -h  <BAM>  |  SAMtoBED  -i -  -o <BED>  -x  -v\n# macs2 callpeak  -t <BED>  -f BEDPE  -n NAME  -g ce  --keep-dup all"
  },
  {
    "objectID": "single_nuclear.html#dot-plot-heatmap",
    "href": "single_nuclear.html#dot-plot-heatmap",
    "title": "Single nuclear",
    "section": "Dot plot heatmap",
    "text": "Dot plot heatmap"
  },
  {
    "objectID": "pseudotime.html#lineage-gene-expression-heatmaps",
    "href": "pseudotime.html#lineage-gene-expression-heatmaps",
    "title": "Pseudotime",
    "section": "Lineage gene expression heatmaps",
    "text": "Lineage gene expression heatmaps"
  },
  {
    "objectID": "extra_tips.html",
    "href": "extra_tips.html",
    "title": "Extra tips",
    "section": "",
    "text": "Cycling through files\nOften you will need to work a lot of files through a single function i.e. looping over names. There are a couple of ways of doing this below, both of which work on roughly the same principal. They will take a name such as MB18b_S2_R2_001.fastq.gz, split it into ‘fields’, demarcated by ‘_’, so MB18b is field 1 and S2 is field 2. This is done by cut -d'_' -f 1-2 , where f1-2 are the fields 1 and 2. You need to pick the fields which let you separate out your samples from each other.\nin the single nuclear you can do a below (complicated). declare -p newArr will show all the names that are going to be looped over.\n\narr=($id)\n# Get central bit of filename\narr_names=()\nfor i in \"${arr[@]}\"\ndo\n    arr_names+=(\"$(echo $i | cut -d'_' -f 1-3)\")\ndone\ndeclare -p arr_names\n\n# Get only the unique filenames\nnewArr=(); \nwhile IFS= read -r -d '' x; \ndo newArr+=(\"$x\"); \ndone < <(printf \"%s\\0\" \"${arr_names[@]}\" | sort -uz)\ndeclare -p newArr\n\n# Loop over those names in the function\nfor i in ${newArr[@]}\ndo\n\nfastp \\\n-w 16 \\\n-p \\\n-Q \\\n-l 50 \\\n-i /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/${i}_2.fastq.gz \\\n-o results/raw/trimmed/trimmed_${i}_2.fastq.gz \\\n--adapter_sequence=AGCAGTGGTATCAACGCAGAGTGAATGGG \\\n--adapter_fasta /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/data/adapters.fasta \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results/raw/fastp_reports/trimmed_${i}_fastp_report.html \\\n--json results/raw/fastp_reports/trimmed_${i}_fastp_report.json >> $fastp_logfile 2>&1\n\nseqkit pair \\\n--read1 /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/${i}_1.fastq.gz \\\n--read2 \"$project_folder\"/results/raw/trimmed/trimmed_${i}_2.fastq.gz \\\n--out-dir \"$project_folder\"/results/raw/final_fqs\n\ndone \n\nAlternatively you can use a package called parallel, which effectively gets all the names, puts them in a file and will put them into a function iteratively wherever you put a {} as below.\n\n# Below will get only the names of files (not folders) in the specified directory. \nfind /scratch/moh1u21/ATAC_seq_test/data/demultiplexed_reads/ATAC_seq_test/ -maxdepth 1 -type f | awk -F/ '{print $NF}' | cut -d\"_\" -f1-2 | sort | uniq > fast_files.txt\n\n# cat fast_files.txt | parallel \\\n# fastq_info final_fqs/{}_1.fastq.gz final_fqs/trimmed_{}_2.fastq.gz '>>' Results.txt '2>&1'\n\ncat fast_files.txt | parallel \\\nfastp \\\n-w 16 \\\n-p \\\n--length_required 50 \\\n-i data/demultiplexed_reads/ATAC_seq_test/{}_R1_001.fastq.gz \\\n-I data/demultiplexed_reads/ATAC_seq_test/{}_R2_001.fastq.gz \\\n-o data/demultiplexed_reads/trimmed/trimmed_{}_R1_001.fastq.gz \\\n-O data/demultiplexed_reads/trimmed/trimmed_{}_R2_001.fastq.gz \\\n--detect_adapter_for_pe \\\n--correction \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results/reports/fastp/{}_trimmed_fastp_report.html \\\n--json results/reports/fastp/{}_trimmed_fastp_report.json '>' $fastp_logfile '2>&1'\n\n\n\nLooking for script\nIf you ever have a file and you need to find the script which generated it, you can use the below code to find the file in which it is written.\n\n#!/bin/bash\n\n# Set the directory path and search string\nDIRECTORY=\"path/to/your/folder\"\nSEARCH_STRING=\"your_line_of_code\"\n\n# Search for the specific line of code in R script files\nfind ./ -name \"*.R\" -type f -exec awk -v search_string=\"enrichment_results\" '\n  $0 ~ search_string {\n    printf \"%s:%s:%s\\n\", FILENAME, FNR, $0\n  }' {} \\;\n\n\n\nGeneral enrichment\n\nThe code takes a table with the most differentially expressed markers for a single cell dataset by cluster. The universe in this case is all protein-coding genes in the genome. An example of the input markers object is hashed below.\n\n#                p_val avg_log2FC pct.1 pct.2     p_val_adj cluster   gene\n# TNNT1  1.510251e-192  1.4501320 0.961 0.376 2.587512e-188       0  TNNT1\n# ATP2A2  7.443596e-87  0.7266991 0.667 0.242  1.275311e-82       0 ATP2A2\n# TPM3    2.308168e-84  0.5415437 0.867 0.366  3.954584e-80       0   TPM3\n# LGR5    9.075674e-71  0.6019044 0.452 0.118  1.554935e-66       0   LGR5\n# BICC1   1.202617e-64  0.6783576 0.549 0.202  2.060444e-60       0  BICC1\n# MYBPC1  2.295684e-59  0.5507988 0.996 0.895  3.933196e-55       0 MYBPC1\n\nlibrary(org.Hs.eg.db)\nlibrary(tidyverse)\nlibrary(clusterProfiler)\nlibrary(AnnotationDbi)\n\nmarkers <- readRDS(\"data/wholemuscle_sn_allmarkers.rds\")\n\n# Set up my universe ------------------------------------------------------\n## Get a list of all Entrez Gene IDs\nentrez_ids <- keys(org.Hs.eg.db, keytype = \"ENTREZID\")\n\n## Get the corresponding gene symbols\ngene_info <- \n  AnnotationDbi::select(org.Hs.eg.db, \n                        keys = entrez_ids, \n                        columns = c(\"SYMBOL\", \"GENETYPE\"), \n                        keytype = \"ENTREZID\")\n\nprotein_coding_genes <- gene_info[gene_info$GENETYPE == \"protein-coding\",]\nuniverse <- pull(protein_coding_genes, SYMBOL)\n\n\n# Process data ------------------------------------------------------------\nnested <- \n  markers %>%\n  filter(p_val_adj<0.05) %>% \n  dplyr::group_by(cluster) %>% \n  group_map(~pull(.x, gene))\n\n# universe <- shrink.d11$GeneID\n\nenrichment_results <- \n  map(\n    nested,\n    ~ enrichGO(\n      gene = .x,\n      universe = universe, \n      OrgDb = org.Hs.eg.db,\n      keyType = \"SYMBOL\",\n      ont = \"ALL\",\n      pvalueCutoff = 0.05,\n      readable = TRUE\n    )\n  ) %>%\n  map(as_tibble) %>%\n  map( ~ filter(.x, Count >= 3)) \n\nnames(enrichment_results) <- str_c(\"Cluster_\", seq(0, length(enrichment_results)-1, 1))\nenrichment_results_export <- bind_rows(enrichment_results, .id=\"cluster\")\n\nnorbs <- \n  enrichment_results_export %>% \n  group_by(cluster) %>% \n  arrange(cluster, p.adjust, .by_group = T)\n\ntable(norbs$cluster)\n\nabbles <- \n  norbs %>% \n  group_by(cluster) %>% \n  slice(1:10)\n\nwrite_csv(norbs, \"results/enrichment_results_ss.csv\")\nwrite_csv(abbles, \"results/cluster_markers_top10s.csv\")\n\nThe code could be modified as below to run a single set of genes - NOT RUN -\n\nlibrary(org.Hs.eg.db)\nlibrary(tidyverse)\nlibrary(clusterProfiler)\nlibrary(AnnotationDbi)\n\nmarkers <- readRDS(\"data/wholemuscle_sn_allmarkers.rds\")\n\n# Set up my universe ------------------------------------------------------\n## Get a list of all Entrez Gene IDs\nentrez_ids <- keys(org.Hs.eg.db, keytype = \"ENTREZID\")\n\n## Get the corresponding gene symbols\ngene_info <- \n  AnnotationDbi::select(org.Hs.eg.db, \n                        keys = entrez_ids, \n                        columns = c(\"SYMBOL\", \"GENETYPE\"), \n                        keytype = \"ENTREZID\")\n\nprotein_coding_genes <- gene_info[gene_info$GENETYPE == \"protein-coding\",]\nuniverse <- pull(protein_coding_genes, SYMBOL)\n\n\n# Process data ------------------------------------------------------------\n\nenrichment_results <- \n  enrichGO(\n      gene = \"<character vector containing genes of interest>\",\n      universe = universe, \n      OrgDb = org.Hs.eg.db,\n      keyType = \"SYMBOL\",\n      ont = \"ALL\",\n      pvalueCutoff = 0.05,\n      readable = TRUE\n    ) %>%\n  as_tibble %>%\n  filter(Count >= 3)"
  },
  {
    "objectID": "single_cell.html#dot-plot-heatmap",
    "href": "single_cell.html#dot-plot-heatmap",
    "title": "Overview",
    "section": "Dot plot heatmap",
    "text": "Dot plot heatmap\n\nTo do dot-plot heat maps (i.e. showing distribution of expression for a single gene)\n\nsuppressMessages(library(Seurat))\nsuppressMessages(library(kBET))\nsuppressMessages(library(PCAtools))\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(FNN))\nsuppressMessages(library(scater))\nsuppressMessages(library(scran))\nsuppressMessages(library(SingleCellExperiment))\nsuppressMessages(library(BiocSingular))\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(celda))\nsuppressMessages(library(clustree))\nsuppressMessages(library(org.Hs.eg.db))\n\nsso <- readRDS(\"data/processed/22-11-29-master_updated.rds\")\n\n# Search for individual genes to see if they exist in the dataset\nrownames(sso)[grep(\"^MK\", rownames(sso), ignore.case=T)]\n\n# Makes a big feature plot with all the heatmap \nFeaturePlot(sso, features = c(\"H19\",\n                              \"MKI67\",\n                              \"TOP2A\",\n                              \"PCNA\",\n                              \"CCNE2\",\n                              \"CCND1\",\n                              \"CCND2\",\n                              \"CENPK\",\n                              \"CDC6\",\n                              \"TNNT2\",\n                              \"MYH3\",\n                              \"MYOG\",\n                              \"SQSTM1\",\n                              \"GSTP1\",\n                              \"NQO1\",\n                              \"POSTN\",\n                              \"FBN1\",\n                              \"TTN\",\n                              \"HES1\",\n                              \"BRCA1\", \n                              \"BRCA2\",\n                              \"COX5B\",\n                              \"ACTA2\", \n                              \"ACTA1\", \n                              \"RAD21\",\n                              \"RAD51AP1\",\n                              \"NES\", \n                              \"MEF2C\",\n                              \"DES\",\n                              \"MYF5\",\n                              \"CDKN1A\",\n                              \"CDKN2A\",\n                              \"FTH1\",\n                              \"FTL\",\n                              \"MYOD1\"),\n            ncol=4)\n\n\n# You need to be able to state the gene symbol exactly - list them here\ngenes_of_interest <- c(\n  \"myoD\",\n  \"myf5\",\n  \"Top2a\",\n  \"MK167\",\n  \"PRC1\",\n  \"cox6A1\",\n  \"SQSTM1\",\n  \"WIPI1\",\n  \"RPL31\",\n  \"GSTP1\",\n  \"POSTN\",\n  \"WNT5A\",\n  \"ACTNA\",\n  \"Il-6\",\n  \"CTNNB1\",\n  \"FTL\",\n  \"FTH1\",\n  \"TXN\",\n  \"IGFBP7\",\n  \"KRT7\",\n  \"CD248\",\n  \"BGN\",\n  \"MMP2\",\n  \"p53\",\n  \"PINK\",\n  \"Col1a1\",\n  \"FN1\",\n  \"SERPINE1\",\n  \"ccnd1\",\n  \"PGC1a\", # PPARGC1A\n  \"BNIP3\"\n)\n\n# The function below wil return those with an exact match (i.e. one gene withg that name)\naffle <- \n  map(genes_of_interest, ~{\n    rownames(sso)[grep(paste0(\"^\", .x), rownames(sso), ignore.case=T)]\n  }) %>%  \n  keep(~ length(.) == 1) %>% \n  list_c()\n\n# The rest of the genes you will have to search for in the dataset with the below line, \n# pick the gene and put in the [previously] unknowns \nrownames(sso)[grep(paste0(\"^\", \"<gene name>\"), rownames(sso), ignore.case=T)]\n\nunknowns <- c(\n  \"IGFBP7\",\n  \"MMP2\",\n  \"TXN\",\n  \"WNT5A\",\n  \"TGFB1\",\n  \"COX6A1\",\n  \"PRC1\",\n  \"MKI67\",\n  \"ACTN2\",\n  \"IL6\",\n  \"KRT7\",\n  \"PPARGC1A\",\n  \"BNIP3\"\n)\n\n# This will put all the gene names together saved in a dot images folder\nfinal <- c(unknowns, affle)\n\n# This will make individual heatmaps for each one\nork <-\n  final %>%\n  imap( ~ FeaturePlot(sso, features = .x, pt.size = 0.35))\nork <- setNames(ork, final)\ndir.create(\"dot_images\")\nork %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"dot_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\n# This will make violin plots for each one saved in a vln images folder\nork_vln <-\n  final %>%\n  imap( ~ VlnPlot(sso, features = .x))\nork_vln <- setNames(ork_vln, final)\ndir.create(\"vln_images\")\nork_vln %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"vln_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })"
  },
  {
    "objectID": "myob_single_nuc.html",
    "href": "myob_single_nuc.html",
    "title": "Myoblast single nuclear",
    "section": "",
    "text": "Summary\n\n\nSetup\n\nRaw data is located at /research/muscledata/Shared_folder/22-06-01-snrna_seq/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/\nNot started - aim was to optomise on whole muscle single nuclear and go from there."
  },
  {
    "objectID": "whole_muscle_scrnaseq.html",
    "href": "whole_muscle_scrnaseq.html",
    "title": "Whole muscle single nuclear",
    "section": "",
    "text": "Summary\n\n\nSetup\n\nThe project folder is /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq\nThe raw data is at /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/data/230126_NB501007_0335_AH3K2FAFX5\nAll work for the ‘bash bit’ was potentially done in the qc_env conda environment, or the qc_and_alignment.sif apptainer and the ‘R bit’ was done in the sc_qc conda environment.\nIf the bash bit doesn’t work - remove any commented lines, can get a bit funny with those sometimes.\nThis pipeline deviates from the code used for the single cell alignment, as the previous single cell alignment pipeline based on the pipeline proposed by the McCarrol lab did not account for intronic reads and was inflexible with regards to multi-mapping reads.\n\n\n\n‘Bash bit’\n\nThe file for the bash bit is located at /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/src/solo_alignment_trimR2only.sh.\n\n\n \ncd /scratch/moh1u21/23-01-05-single_nuclear\n\necho $PATH | sed 's/:/\\n/g' | sort | uniq -c\ntoday=$(date +\"%Y-%m-%d\")\n\n# Set up project folders and environmental variables\n\nproject_folder=/scratch/moh1u21/23-01-05-single_nuclear\n# genomedir=/Users/fluentin44/Documents/22-05-15-index_genome/genome_index_hg19 \ngenomedir=/scratch/moh1u21/22-05-15-index_genome/hg19_ensembl\n\nmkdir -p \"$project_folder\"/results/logs\nmkdir -p \"$project_folder\"/results/raw/solo_output\nmkdir -p \"$project_folder\"/results/raw/fastqs\nmkdir -p \"$project_folder\"/results/raw/fastqc\nmkdir -p \"$project_folder\"/results/raw/multiqc\nmkdir -p \"$project_folder\"/results/raw/trimmed\nmkdir -p \"$project_folder\"/results/raw/final_fqs\nmkdir -p \"$project_folder\"/results/raw/fastp_reports\n\nfastp_logfile=results/logs/fastp_log.txt\nstar_logfile=results/logs/star_log.txt\n\n# tmpdir=\"$project_folder\"/tmp_dir\nsolo_folder=\"$project_folder\"/results/raw/solo_output\n\n# fastqc data/full_reads/*_2.fastq \\\n# -o results/solo_folder/fastqcs/pre-trim/fastqc_reports/\n\n# Do an initial QC of the reads\n\nfastqc /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/*.fastq.gz \\\n-o results/raw/fastqc/ \\\n-t 60 \\\n--contaminants /scratch/moh1u21/ATAC_seq_test/data/adapters.txt\n\nmultiqc results/raw/fastqc/ \\\n-o results/raw/multiqc/ \\\n-n multiqc_pre_trim\n\n# Cycle though the files to do a trim of read 2 (read one is index etc, not aligned and would be detrimental. to lose any info)\nid=$(ls /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs)\n\narr=($id)\n# Get central bit of filename\narr_names=()\nfor i in \"${arr[@]}\"\ndo\n    arr_names+=(\"$(echo $i | cut -d'_' -f 1-3)\")\ndone\ndeclare -p arr_names\n\n# Get only the unique filenames\nnewArr=(); \nwhile IFS= read -r -d '' x; \ndo newArr+=(\"$x\"); \ndone < <(printf \"%s\\0\" \"${arr_names[@]}\" | sort -uz)\ndeclare -p newArr\n\nfor i in ${newArr[@]}\ndo\n\nfastp \\\n-w 16 \\\n-p \\\n-Q \\\n-l 50 \\\n-i /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/${i}_2.fastq.gz \\\n-o results/raw/trimmed/trimmed_${i}_2.fastq.gz \\\n--adapter_sequence=AGCAGTGGTATCAACGCAGAGTGAATGGG \\\n--adapter_fasta /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/data/adapters.fasta \\\n--trim_poly_g \\\n--trim_poly_x \\\n--cut_tail \\\n--cut_mean_quality 30 \\\n--html results/raw/fastp_reports/trimmed_${i}_fastp_report.html \\\n--json results/raw/fastp_reports/trimmed_${i}_fastp_report.json >> $fastp_logfile 2>&1\n\n# fastP will remove and reads in the R2 file with too low a quality, which will leave the partner read in R1 \nseqkit pair \\\n--read1 /scratch/moh1u21/single_nuclear/bsg-ftp.well.ox.ac.uk/220427_A00711_0538_BH7VMTDMXY/fastqs/${i}_1.fastq.gz \\\n--read2 \"$project_folder\"/results/raw/trimmed/trimmed_${i}_2.fastq.gz \\\n--out-dir \"$project_folder\"/results/raw/final_fqs\n\ndone \n\nfastqc results/raw/final_fqs/*.fastq.gz \\\n-o results/raw/fastqc/ \\\n-t 60 \\\n--contaminants /scratch/moh1u21/ATAC_seq_test/data/adapters.txt\n\nmultiqc results/raw/fastqc/ \\\n-o results/raw/multiqc/ \\\n-n multiqc_post_trim\n\n\n# id=$(ls results/raw/trimmed)\n\n# arr=($id)\n# # Get central bit of filename\n# arr_names=()\n# for i in \"${arr[@]}\"\n# do\n#   arr_names+=(\"$(echo $i | cut -d'_' -f 1-4)\")\n# done\n# declare -p arr_names\n\n# # Get only the unique filenames\n# newArr=(); \n# while IFS= read -r -d '' x; \n# do newArr+=(\"$x\"); \n# done < <(printf \"%s\\0\" \"${arr_names[@]}\" | sort -uz)\n# declare -p newArr\n\n# mkdir -p results/solo_folder/output/bams\n# mkdir -p results/solo_folder/output/final_logs\n# mkdir -p results/solo_folder/output/other_logs\n\nfor i in ${newArr[@]}\ndo\n\nfastq_1=results/raw/final_fqs/${i}_1.fastq.gz\nfastq_2=results/raw/final_fqs/trimmed_${i}_2.fastq.gz\necho ${fastq_1}\necho ${fastq_2}\n\nSTAR \\\n--runThreadN 60 \\\n--genomeDir ${genomedir} \\\n--outFileNamePrefix ${solo_folder}/sample_${i}_star. \\\n--readFilesIn ${fastq_2} ${fastq_1} \\\n--soloType CB_UMI_Simple \\\n--readFilesCommand zcat \\\n--soloCBwhitelist None \\\n--soloCBstart 1 \\\n--soloCBlen 12 \\\n--soloUMIstart 13 \\\n--soloUMIlen 8 \\\n--soloBarcodeReadLength 0 \\\n--soloStrand Unstranded \\\n--soloCellFilter EmptyDrops_CR 1000 0.99 10 45000 90000 1000 0.01 20000 0.01 10000 \\\n--outSAMattributes All CB UB sM sS sQ uT RG \\\n--outSAMattrRGline ID:${i} SM:${i} \\\n--outSAMtype BAM SortedByCoordinate \\\n--outMultimapperOrder Random \\\n--soloCellReadStats Standard \\\n--soloFeatures Gene GeneFull Velocyto \\\n--soloMultiMappers EM \\\n--outFilterMultimapNmax 10 >> $star_logfile 2>&1\n\n# STAR \\\n# --runThreadN 60 \\\n# --readFilesCommand zcat \\\n# --genomeDir ${genomedir} \\\n# --outFileNamePrefix ${solo_folder}/sample_${i}_star. \\\n# --readFilesIn $fastq_2 $fastq_1 \\\n# --soloType CB_UMI_Simple \\\n# --soloCBstart 1 \\\n# --soloCBlen 12 \\\n# --soloUMIstart 13 \\\n# --soloUMIlen 8 \\\n# --soloCBwhitelist None \\\n# --clipAdapterType CellRanger4 \\\n# --soloBarcodeReadLength  0 \\\n# --soloStrand Unstranded \\\n# --outSAMattributes NH HI nM AS CR UR CB UB sS sQ RG sM \\\n# --outSAMattrRGline ID:${i} SM:${i} \\\n# --outSAMtype BAM SortedByCoordinate \\\n# --outMultimapperOrder Random \\\n# --soloCellFilter  EmptyDrops_CR \\\n# --soloCellReadStats Standard \\\n# --soloFeatures Gene GeneFull Velocyto \\\n# --soloMultiMappers EM \\\n# --outFilterMultimapNmax 10\n\n# mv ${solo_folder}/*.bam ${solo_folder}/output/bams\n# mv ${solo_folder}/*.Log.final.out ${solo_folder}/output/final_logs\n# mv ${solo_folder}/*.Log.out ${solo_folder}/*.Log.progress.out ${solo_folder}/*.SJ.out.tab ${solo_folder}/output/other_logs\n\ndone\n\nmkdir -p \"$project_folder\"/results/raw/solo_output/bams\nmkdir -p \"$project_folder\"/results/raw/solo_output/final_logs\nmkdir -p \"$project_folder\"/results/raw/solo_output/progress_logs\nmkdir -p \"$project_folder\"/results/raw/solo_output/sj_outs\nmkdir -p \"$project_folder\"/results/raw/solo_output/process_logs\nmkdir -p \"$project_folder\"/results/raw/solo_output/results_data\n\nmv  \"$project_folder\"/results/raw/solo_output/*.bam \\\n    \"$project_folder\"/results/raw/solo_output/bams\nmv  \"$project_folder\"/results/raw/solo_output/*.Log.final.out \\\n    \"$project_folder\"/results/raw/solo_output/final_logs\nmv  \"$project_folder\"/results/raw/solo_output/*.Log.progress.out \\\n    \"$project_folder\"/results/raw/solo_output/progress_logs\nmv  \"$project_folder\"/results/raw/solo_output/*.SJ.out.tab \\\n    \"$project_folder\"/results/raw/solo_output/sj_outs\nmv  \"$project_folder\"/results/raw/solo_output/*star.Log.out \\\n    \"$project_folder\"/results/raw/solo_output/process_logs\nmv  \"$project_folder\"/results/raw/solo_output/*star.Solo.out \\\n    \"$project_folder\"/results/raw/solo_output/results_data\n\n# --soloCellFilter EmptyDrops_CR 1000 0.99 10 45000 90000 1000 0.01 20000 0.01 10000 \\\n\n# fastq_1=data/full_reads/WTCHG_928874_CU001_1.fastq\n# fastq_2=data/full_reads/WTCHG_928874_CU001_2.fastq\n# echo ${fastq_1}\n# echo ${fastq_2}\n\n\n\n# STAR \\\n# --runThreadN 60 \\\n# --genomeDir ${genomedir} \\\n# --outFileNamePrefix ${solo_folder}/sample_CU001_star. \\\n# --readFilesIn ${fastq_2} ${fastq_1} \\\n# --soloType CB_UMI_Simple \\\n# --soloCBwhitelist None \\\n# --soloCBstart 1 \\\n# --soloCBlen 12 \\\n# --soloUMIstart 13 \\\n# --soloUMIlen 8 \\\n# --soloBarcodeReadLength 0 \\\n# --soloStrand Unstranded \\\n# --clipAdapterType CellRanger4 \\\n# --soloCellFilter EmptyDrops_CR \\\n# --outSAMattributes All RG \\\n# --outSAMattrRGline ID:CU001 SM:CU001 \\\n# --outSAMtype BAM SortedByCoordinate \\\n# --outMultimapperOrder Random \\\n# --soloCellReadStats Standard \\\n# --soloFeatures Gene GeneFull Velocyto \\\n# --soloMultiMappers EM \\\n# --outFilterMultimapNmax 10\n\n\n\n‘R bit’\n\nThe below script is at /scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/src/whole_muscle_dsn_qc.R\nIve saved a number of objects along the way, so you shouldnt have to run the whole thing again and again, and i’d advise you not to as it may change slightly each time, or over time.\nNote - the final Seurat object does not exclude doublets (of which there were not many - have been documented in csv files produced along the way) and background contamination (again few cells with significant contamination) - ideally would have done so but ran out of time. This diverges from what may be typically expected and the next person to take on this code may wish to carry on in this vein.\nNote - a threshold of 4.5 was chosen for single nuclear as graphs showed samples with high mitochondrial gene expression also with high read count, indicating should not necessarily be removed.\n\n\nsuppressPackageStartupMessages(library(DropletUtils))\nsuppressPackageStartupMessages(library(reticulate))\nsuppressPackageStartupMessages(library(singleCellTK))\nsuppressPackageStartupMessages(library(AnnotationHub))\nsuppressPackageStartupMessages(library(SingleCellExperiment))\nsuppressPackageStartupMessages(library(scater))\nsuppressPackageStartupMessages(library(ensembldb))\nsuppressPackageStartupMessages(library(BiocParallel))\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(patchwork))\nsuppressPackageStartupMessages(library(ggvenn))\nsuppressPackageStartupMessages(library(magrittr))\nsuppressPackageStartupMessages(library(Seurat))\nsuppressPackageStartupMessages(library(clustree))\nsuppressPackageStartupMessages(library(scran))\nsuppressPackageStartupMessages(library(bluster))\n\nset.seed(9816)\n\nbp.params <- MulticoreParam(workers = 40)\n\nstarsolodirs <- dir(\"/scratch/moh1u21/23-01-30-whole_muscle_snrnaseq/results/raw/solo_output/results_data\", full.names=T)\n\nsamples <-\n    c(\"sample_a_178K400\",\n    \"sample_b_178K300\",\n    \"sample_c_178K200\",\n    \"sample_d_259K400\",\n    \"sample_e_259K300\",\n    \"sample_h_12K112\")\n\n# saveRDS(data/bibs.rds)\n# bibs <- readRDS(\"data/bibs.rds\")\n\nbibs <- \nimportSTARsolo(\n  starsolodirs,\n  samples,\n  STARsoloOuts = \"GeneFull/raw\",\n  matrixFileNames = \"UniqueAndMult-EM.mtx\",\n  featuresFileNames = \"features.tsv\",\n  barcodesFileNames = \"barcodes.tsv\",\n  gzipped = \"auto\",\n  class = c(\"Matrix\", \"matrix\"),\n  delayedArray = FALSE,\n  rowNamesDedup = TRUE\n)\n\nbibs_qcd <- \n  runBarcodeRankDrops(\n    bibs,\n    sample = colData(bibs)$sample,\n    useAssay = \"counts\",\n    lower = 500,\n    fitBounds = NULL,\n    df = 20\n  )\n\nplots <- \n  plotBarcodeRankScatter(\n    bibs_qcd,\n    sample = colData(bibs_qcd)$sample,\n    defaultTheme = FALSE,\n    dotSize = 0.5,\n    title = NULL,\n    titleSize = 12,\n    xlab = NULL,\n    ylab = NULL,\n    axisSize = 12,\n    axisLabelSize = 15,\n    legendSize = 10,\n    combinePlot = \"all\",\n    sampleRelHeights = 1,\n    sampleRelWidths = 1\n  )\n\n# # adjust to add titles to plots\n# plots <- flatten(plots)\n# plots[[1]] + labs(title=\"Plot of length \\n by dose\")\n# gridExtra::grid.arrange(grobs=plots, ncol=3)\n\nbibs_qcd <- \n  runEmptyDrops(\n    bibs_qcd,\n    lower = 500,\n    sample = colData(bibs)$sample,\n    retain = 1000\n    # BPPARAM = bp.params\n  )\n\ntable(duplicated(rownames(bibs_qcd)))\nrownames(bibs_qcd) <- scuttle::uniquifyFeatureNames(rownames(bibs_qcd), rowData(bibs_qcd)$feature_name)\nrowData(bibs_qcd)$updated_feature_name <- rownames(bibs_qcd)\ntable(duplicated(rownames(bibs_qcd)))\n# saveRDS(bibs_qcd, \"data/bibs_qcd.rds\")\nbibs_qcd <- readRDS(\"data/bibs_qcd.rds\")\n\nbibs_ed <- bibs_qcd \n\n# abbles <-  \n# runDropletQC(\n#   bibs,\n#   algorithms = c(\"QCMetrics\", \"emptyDrops\", \"barcodeRanks\"),\n#   sample = colData(bibs)$sample,\n#   useAssay = \"counts\",\n#   paramsList = NULL\n# )\n\n\n# Testing whether emptyDrops is sound -------------------------------------\n\nset.seed(100)\nall.out <- emptyDrops(counts(bibs), lower=500, retain=1000, test.ambient=TRUE)\nhist(all.out$PValue[all.out$Total <= 500 & all.out$Total > 0],\n     xlab=\"P-value\", main=\"\", col=\"grey80\") \n\nmean(all.out$PValue[all.out$Total <= 500 & all.out$Total > 0] <= 0.05)\n\n# is.cell <- abbles$dropletUtils_emptyDrops_fdr <= 0.001\n# sum(is.cell, na.rm=TRUE)\n\n# saveRDS(bibs_ed, \"empty_dropped_sce.rds\")\n# bibs_ed <- readRDS(\"empty_dropped_sce.rds\")\n\n\n# Plot empty drops results ------------------------------------------------\n\nplotEmptyDropsResults(bibs_ed, sample=bibs_ed$samples)\nsummary(bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001)\ntable(Sig=bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001, Limited=bibs_ed$dropletUtils_emptyDrops_limited)\n\ncolData(bibs_ed) %>%\n  as.data.frame() %>% \n  filter(dropletUtils_emptyDrops_fdr <= 0.001) %>%\n  filter(!is.na(dropletUtils_emptyDrops_fdr)) %>%\n  group_by(sample) %>%\n  summarise(cells=n()) %T>%\n  readr::write_excel_csv(\"results/cellno_per_sample.csv\", col_names=T)\n\nbibs_dropped <- bibs_ed[,which(bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001)]\nbibs_dropped <- bibs_dropped[,!is.na(bibs_dropped$dropletUtils_emptyDrops_fdr)]\n\nis.cell <- bibs_ed$dropletUtils_emptyDrops_fdr <= 0.001\nsum(is.cell, na.rm=TRUE)\n\n# set.seed(12345)\n# bibsy <- runCellQC(bibs_dropped, \n#                    algorithms = c(\n#                      \"QCMetrics\", \n#                      \"scrublet\", \n#                      \"scDblFinder\", \n#                      \"cxds\",\n#                      \"bcds\",\n#                      \"cxds_bcds_hybrid\",\n#                      \"doubletFinder\", \n#                      \"decontX\"\n#                     #  \"soupX\"\n#                    ), \n#                    background=bibs_ed,\n#                    mitoPrefix=\"^MT-\",\n#                    sample = colData(bibs_dropped)$sample\n#                    )\n# \n# # saveRDS(bibsy, \"data/bibsy.rds\")\n# bibsy <- readRDS(\"data/bibsy.rds\")\n# \n# table(colData(bibsy)$scrublet_call)\n# table(colData(bibsy)$scDblFinder_doublet_call)\n# length(which(colData(bibsy)$decontX_contamination < 0.4))\n# \n# hist(colData(bibsy)$decontX_contamination)\n\n\n# # Normalization.\n# set.seed(1234)\n# bibsy_umap <- logNormCounts(bibsy)\n# dec <- modelGeneVar(bibsy_umap)\n# hvg <- getTopHVGs(dec, prop=0.1)\n# bibsy_umap <- runPCA(bibsy_umap, ncomponents=25, subset_row=hvg)\n# colLabels(bibsy_umap) <- clusterCells(bibsy_umap, use.dimred='PCA',\n#     BLUSPARAM=NNGraphParam(cluster.fun=\"louvain\"))    \n# bibsy_umap <- runUMAP(bibsy_umap, dimred = 'PCA')\n# plotUMAP(bibsy_umap, colour_by=\"label\")\n\n\n# oncle <- \n#   plotDecontXResults(\n#     bibsy,\n#     reducedDimName=\"decontX_sample_a_178K400_UMAP\"\n#   )\n\n\n\n# Diagnostic plots --------------------------------------------------------\n\ngenesPerCell <- colSums(counts(bibs_dropped) > 0)\nsummary(genesPerCell)\nplot(density(genesPerCell), main=\"\", xlab=\"Genes per cell\")\n\ntmpCounts <- counts(bibs_dropped)[,1:1000]\n\nplot(rowSums(tmpCounts),\n     rowMeans(tmpCounts > 0),\n     log = \"x\",\n     xlab=\"total number of UMIs\",\n     ylab=\"proportion of cells expressing the gene\"\n)\n\nrm(tmpCounts)\n\nrel_expression <- t( t(counts(bibs_dropped)) / colSums(counts(bibs_dropped))) * 100\nrownames(rel_expression) <- rowData(bibs_dropped)$feature_name\nmost_expressed <- sort(rowSums( rel_expression ),T)[20:1]\nplot_data <- as.matrix(t(rel_expression[names(most_expressed),]))\n\nboxplot(plot_data, cex=0.1, las=1, xlab=\"% total count per cell\", horizontal=TRUE)\n\n# Remove genes with zero expression across cell pop.\ndetected_genes <- rowSums(counts(bibs_dropped)) > 0\ntable(detected_genes)\nbibs_dropped <- bibs_dropped[detected_genes,]\n\n\n# ah <- AnnotationHub()\n# ens.mm.98 <- query(ah, c(\"Homo sapiens\", \"EnsDb\", 98))[[1]] \n\n# genes <- rowData(bibs_dropped)$feature_ID\n# gene_annot <- AnnotationDbi::select(ens.mm.98, \n#                                     keys = genes,\n#                                     keytype = \"GENEID\",\n#                                     columns = c(\"GENEID\", \"SEQNAME\")) %>%\n#     set_names(c(\"ID\", \"Chromosome\"))\n# rowData(bibs_dropped) <- merge(rowData(bibs_dropped), gene_annot, \n#                                 by.x = \"feature_ID\", \n#                                 by.y = \"ID\", \n#                                 all.x=TRUE, \n#                                 sort=FALSE)\n# rownames(rowData(bibs_dropped)) <- rowData(bibs_dropped)$feature_ID\n\n\n# QC ----------------------------------------------------------------------\n\n# Assess number of mitochondrial genes in dataset\njobbo <- bibs_dropped[grep(\"^MT-\",rownames(bibs_dropped)),]\n# jobbo <- rowData(bibs_dropped)[grep(\"^MT\",rowData(bibs_dropped)$Chromosome),]\ntable(rownames(rowData(bibs_dropped)) %in% rownames(jobbo))\n\nhead(rowData(bibs_dropped))\n\n# Tag mito ogenes as mito\nis.mito <- grep(\"^MT-\",rownames(bibs_dropped))\n\n# QC of cells - lib size, features, mito, discard\nsce <- addPerCellQC(bibs_dropped, subsets=list(Mito=is.mito))\ncell_qc_results <- quickPerCellQC(colData(sce), percent_subsets=c(\"subsets_Mito_percent\"))\ncolSums(as.data.frame(cell_qc_results))\n\n# Add qc results back into sce object\nsce$low_lib_size <- cell_qc_results$low_lib_size\nsce$low_n_features <- cell_qc_results$low_n_features\nsce$high_Mito_percent <- cell_qc_results$high_subsets_Mito_percent\nsce$discard <- cell_qc_results$discard\nsce$sn_high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\", min.diff=0.5) # adjustment for snuclear\n\nsummary(sce$subsets_Mito_percent == 0) # Assessing how many cells have zero mito gene expression\n\n# Writing no cells with high mito to csv\ncolData(sce) %>%\n  as.data.frame() %>%\n  filter(sn_high_Mito_percent == TRUE) %>%\n  group_by(sample) %>%\n  summarise(cells=n()) %T>%\n  readr::write_excel_csv(\"results/highmito_per_sample.csv\", col_names=T)\n\n# Comparing sn nuclear adjustrment to isOutlier mito detection\ntable(sce$sn_high_Mito_percent)\ntable(sce$high_Mito_percent)\n\n# sce <- addPerCellQC(bibs_dropped, subsets=list(Mt=grep(\"^MT-\", rownames(bibs_dropped))))\n# summary(sce$subsets_Mt_percent)\n# cell_qc_results <- quickPerCellQC(colData(sce), percent_subsets=c(\"subsets_Mt_percent\"))\n# colSums(as.data.frame(cell_qc_results))\n# sce$high_subsets_Mt_percent <- isOutlier(sce$subsets_Mt_percent, type=\"higher\", min.diff=0.5)\n# cell_qc_results$discard <- Reduce(\"|\", cell_qc_results[,colnames(cell_qc_results)!=\"discard\"])\n# colSums(as.matrix(cell_qc_results))\n\n# plotColData(sce, y=\"subsets_Mt_percent\",\n#     colour_by=I(cell_qc_results$high_subsets_Mt_percent))\n\n\n# MAD thresholds that were chosen for low lib size and features\n\n# low_lib_size <- isOutlier(sce$sum, log=TRUE, type=\"lower\")\n# table(low_lib_size)\nattr(sce$low_lib_size, \"thresholds\")[1]\n# colData(sce)$low_lib_size <- low_lib_size\n\n# low_n_features <- isOutlier(sce$detected, log=TRUE, type=\"lower\")\n# table(low_n_features)\nattr(sce$low_n_features, \"thresholds\")[1]\n# colData(sce)$low_n_features <- low_n_features\n\n# QC plots per sample \ngridExtra::grid.arrange(\n  plotColData(sce, \n              x=\"sample\", \n              y=\"sum\",\n              colour_by = \"low_lib_size\") + \n    scale_y_log10() + \n    labs(y = \"Total count\", title = \"Total count\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n  \n  plotColData(sce, \n              x=\"sample\", \n              y=\"detected\",\n              colour_by = \"low_n_features\") + \n    scale_y_log10() + \n    labs(y = \"Genes detected\", title = \"Genes detected\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n  \n  plotColData(sce, \n              x=\"sum\", \n              y=\"subsets_Mito_percent\", \n              colour_by=\"high_Mito_percent\"),\n  ncol=1\n)\n\n# sn_high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\", min.diff=0.5) # adjustment for snuclear\n# # discard <- Reduce(\"|\", sce[,colnames(sce)!=\"discard\"])\n# # colSums(as.matrix(sce))\n# # high_Mito_percent <- isOutlier(sce$subsets_Mito_percent, type=\"higher\")\n# table(sn_high_Mito_percent)\nattr(sce$high_Mito_percent, \"thresholds\")[2]\nattr(sce$sn_high_Mito_percent, \"thresholds\")[2]\n# colData(sce)$sn_high_Mito_percent <- sn_high_Mito_percent\nsummary(sce$high_Mito_percent)\nsummary(sce$sn_high_Mito_percent)\n\ngridExtra::grid.arrange(\nplotColData(sce,  \n            x=\"sample\",\n            y=\"subsets_Mito_percent\",\n            colour_by = \"sn_high_Mito_percent\") + \n  labs(y = \"Percentage mitochondrial UMIs\",\n       title = \"Mitochondrial UMIs\") +\n  guides(colour=guide_legend(title=\"Discarded\")),\n\nplotColData(sce, \n            x=\"sum\", \n            y=\"subsets_Mito_percent\", \n            colour_by=\"sn_high_Mito_percent\"),\nncol=2\n)\n\nmito_thresh <- 4.5\n\ngridExtra::grid.arrange(\n  # Histogram subsets mito percent\n  colData(sce) %>% \n    as.data.frame() %>% \n    ggplot(aes(x=subsets_Mito_percent)) + \n    geom_density(alpha=0.2, fill=\"#00BFC4\", colour=\"#00BFC4\") +\n    scale_x_log10() + \n    geom_vline(xintercept = 0.2) +\n    geom_vline(xintercept=mito_thresh, color=\"#F8766D\", linetype=\"dashed\"),\n  \n  # Visualize the distribution of mitochondrial gene expression detected per cell\n  colData(sce) %>% \n    as.data.frame() %>% \n    ggplot(aes(color=sample, x=subsets_Mito_percent, fill=sample)) + \n    geom_density(alpha = 0.2) + \n    scale_x_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 0.2) +\n    geom_vline(xintercept = mito_thresh, color=\"#F8766D\", linetype=\"dashed\"),\n    \n  ncol=2 \n)\n\ngridExtra::grid.arrange(\n  # Complexity plot\n  colData(sce) %>% \n    as.data.frame() %>%\n    ggplot(aes(x=sum, y=detected, color=subsets_Mito_percent)) + \n    geom_point() + \n    scale_colour_gradient(low = \"gray90\", high = \"black\") +\n    stat_smooth(method=lm) +\n    scale_x_log10() + \n    scale_y_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 500) +\n    geom_hline(yintercept = 250) ,\n  # facet_wrap(~sample)\n\n  plotColData(sce, x=\"sum\", y=\"detected\", colour_by=\"adjusted_discard\"),\n  ncol=2\n)\n\n# adjusting mito threshold\nsce$adjusted_mito_threshold <- \n  data.frame(hmp = sce$subsets_Mito_percent >= mito_thresh) %>%\n  pull(hmp)\n\nsce$adjusted_discard <- \n  data.frame(lls = sce$low_lib_size,\n             lnf = sce$low_n_features,\n             hmp = sce$adjusted_mito_threshold) %>%\n  mutate(adjusted_discard = case_when(\n    if_any(everything(), ~. == TRUE) ~ TRUE, \n    .default=FALSE)) %>%\n  pull(adjusted_discard)\n\n# Checking effect of changed threshold\ntable(discard=sce$discard, adjusted_discard=sce$adjusted_discard)\n## in this case simply reduced the nbumber of discarded to 41\n\n# colData(sce)$sn_high_Mito_percent <- sn_high_Mito_percent\ngridExtra::grid.arrange(\n  plotColData(sce,  \n              x=\"sample\",\n              y=\"subsets_Mito_percent\",\n              colour_by = \"adjusted_discard\") + \n    labs(y = \"Percentage mitochondrial UMIs\",\n        title = \"Mitochondrial UMIs\") +\n    guides(colour=guide_legend(title=\"Discarded\")),\n\n  plotColData(sce, \n              x=\"sum\", \n              y=\"subsets_Mito_percent\", \n              colour_by=\"adjusted_discard\"),\n  ncol=2\n)\n\nsummary(sce$high_Mito_percent)\nsummary(sce$sn_high_Mito_percent)\nsummary(sce$adjusted_mito_threshold)\n\n# Final removed for mito\ncolData(sce) %>%\nas.data.frame() %>%\nfilter(adjusted_mito_threshold == TRUE) %>%\ngroup_by(sample) %>%\nsummarise(cells=n()) %T>%\nreadr::write_excel_csv(\"results/adjustedmito_per_sample.csv\", col_names=T)\n\nsaveRDS(sce, \"data/post_mit_thresh.rds\")\n\n# sce.filtered <- sce[, !sce$discard]\nsce.filtered <- sce[, !sce$adjusted_discard]\ncolData(sce.filtered) <- colData(sce.filtered)[,c(1:8)]\nsce.filtered <- addPerCellQC(sce.filtered)\ncolnames(colData(sce.filtered))\n\ndim(sce)\ndim(sce.filtered)\n# saveRDS(sce.filtered, \"data/sce_filtered.rds\")\nsce.filtered <- readRDS(\"data/sce_filtered.rds\")\n\n# the cell sparsity: for each cell, the proportion of genes that are not detected\n# the gene sparsity: for each gene, the proportion of cells in which it is not detected\n\n# # Sparsity - perhaps a bit harsh\n# sce_sparse <- addPerFeatureQC(sce.filtered)\n# rowData(sce_sparse)\n\n# colData(sce_sparse)$cell_sparsity <- 1 - (colData(sce_sparse)$detected / nrow(sce_sparse))\n# rowData(sce_sparse)$gene_sparsity <- (100 - rowData(sce_sparse)$detected) / 100\n\n# hist(sce_sparse$cell_sparsity, breaks=50, col=\"grey80\", xlab=\"Cell sparsity\", main=\"\")\n# hist(rowData(sce_sparse)$gene_sparsity, breaks=50, col=\"grey80\", xlab=\"Gene sparsity\", main=\"\")\n\n# sce_sparse$sparse_cells <- sce_sparse$cell_sparsity > 0.99\n# table(sce_sparse$sparse_cells)\n\n# min_cells <- 1 - (10 / ncol(sce_sparse))\n# rowData(sce_sparse)$sparse_genes <- rowData(sce_sparse)$gene_sparsity > min_cells\n# table(rowData(sce_sparse)$sparse_genes)\n\n# sce_final <- sce_sparse[, !sce_sparse$sparse_cells]\n# dim(sce_final)\n# sce_final <- sce_final[!rowData(sce_final)$sparse_genes, ]\n# dim(sce_final)\n\nsaveRDS(sce_final, \"post_sceqc_object.rds\")\n\n# Post-qc seurat ----------------------------------------------------------\n\ntable(Matrix::rowSums(counts(sce.filtered) >= 1) >=3)\nkeep <- Matrix::rowSums(counts(sce.filtered) >= 1) >=3\nfinal_sce <- sce.filtered[keep,]\nchosen_sce <- final_sce\n\npreqc <- CreateSeuratObject(counts=counts(chosen_sce),  # change this threshold is too high \n                            meta.data=as.data.frame(colData(chosen_sce)),\n                            min.cells = 3, \n                            min.features  = 200, \n                            project = \"whole_muscle_myob\", \n                            assay = \"RNA\")\n\n# Making sure rownames of seurat match most recent sce\na <- rownames(chosen_sce)\nb <- rownames(preqc)\nold <- setdiff(a, b)\nnew <- setdiff(b, a)\n\ntable(old %in% rownames(chosen_sce))\ntable(old %in% rownames(preqc))\nfor (i in seq_along(old)) {\n  rownames(chosen_sce) <- gsub(old[i], new[i], rownames(chosen_sce))\n}\ntable(new %in% rownames(chosen_sce))\ntable(new %in% rownames(preqc))\n\npreqc[[\"percent.mt\"]] <- PercentageFeatureSet(preqc, pattern = \"^MT-\")\npreqc[[\"percent.rb\"]] <- PercentageFeatureSet(preqc, pattern = \"^RP[SL]\")\nVlnPlot(preqc, features = c(\"nFeature_RNA\",\"nCount_RNA\",\"percent.mt\",\"percent.rb\"),ncol = 4,pt.size = 0.1) & \n  theme(plot.title = element_text(size=10))\nplot_1 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\")\nplot_2 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\nplot_3 <- FeatureScatter(preqc, feature1 = \"nCount_RNA\", feature2 = \"percent.rb\")\nplot_4 <- FeatureScatter(preqc, feature1 = \"percent.rb\", feature2 = \"percent.mt\")\n\nplot_1 + plot_2\nplot_3 + plot_4\n\npostqc <- subset(preqc, \n                subset = nFeature_RNA > 200 & \n                nFeature_RNA < 2350 & \n                percent.mt < 5 &\n                percent.rb < 3)\nVlnPlot(postqc, features = c(\"nFeature_RNA\",\"nCount_RNA\",\"percent.mt\",\"percent.rb\"),ncol = 4,pt.size = 0.1) & \n  theme(plot.title = element_text(size=10))\n\n# Processing --------------------------------------------------------------\n\n# plan(strategy = \"multicore\", workers = 30)\n\nseur_norm <- NormalizeData(postqc)\nseur_norm <- FindVariableFeatures(seur_norm, selection.method = \"vst\")\nseur_norm <- ScaleData(seur_norm, features = rownames(seur_norm))\ns.genes <- cc.genes$s.genes\ng2m.genes <- cc.genes$g2m.genes\nseur_norm <- CellCycleScoring(\n  seur_norm,\n  s.features = s.genes,\n  g2m.features = g2m.genes,\n  set.ident = TRUE\n)\nseur_norm$CC.Difference <- seur_norm$S.Score - seur_norm$G2M.Score\nseur_scaled <- \n  SCTransform(seur_norm, \n            vst.flavor = \"v2\",\n            vars.to.regress = c(\"percent.mt\", \n                                \"nFeature_RNA\", \n                                \"CC.Difference\")) %>%\n  RunPCA(npcs = 50, verbose = FALSE) %>%\n  RunUMAP(reduction = \"pca\", dims = 1:50, verbose = FALSE) %>%\n  FindNeighbors(reduction = \"pca\", dims = 1:50, verbose = FALSE) %>% \n  FindClusters(verbose = TRUE, resolution=seq(0, 1.2, 0.1))\n\ncell_plots <- function(dataset, reduction, grouping){\n  DimPlot(dataset, reduction = reduction, group.by = grouping, label = T)\n}\n\nplots_umap <- list()\n  for(i in paste0(\"SCT_snn_res.\", seq(0, 1.2, 0.1))){\n    plots_umap[[i]] <- cell_plots(seur_scaled, reduction = \"umap\", i)\n}\n# plots_tsne <- list()\n#   for(i in paste0(\"SCT_snn_res.\", seq(0, 1.2, 0.1))){\n#     plots_tsne[[i]] <- cell_plots(post_sct, reduction = \"tsne\", i)\n# }\n\npng(\"clustree_diagram.png\", width = 1000, height = 1000)\n  clustree(seur_scaled, prefix = \"SCT_snn_res.\") +  # chose 0.6\n    theme(legend.position = \"bottom\")\n  # clustree(master, prefix = \"RNA_snn_res.\", node_colour = \"sc3_stability\")\ndev.off()\n\nplots_umap[[\"SCT_snn_res.0\"  ]] \nplots_umap[[\"SCT_snn_res.0.1\"]] \nplots_umap[[\"SCT_snn_res.0.2\"]] \nplots_umap[[\"SCT_snn_res.0.3\"]]\nplots_umap[[\"SCT_snn_res.0.4\"]] \nplots_umap[[\"SCT_snn_res.0.5\"]] \nplots_umap[[\"SCT_snn_res.0.6\"]] \nplots_umap[[\"SCT_snn_res.0.7\"]]\nplots_umap[[\"SCT_snn_res.0.8\"]] \nplots_umap[[\"SCT_snn_res.0.9\"]] \nplots_umap[[\"SCT_snn_res.1\"  ]] \nplots_umap[[\"SCT_snn_res.1.1\"]]\nplots_umap[[\"SCT_snn_res.1.2\"]]\n\nIdents(object = seur_scaled) <- \"SCT_snn_res.0.6\"\n\npng(\"cluster_diagram.png\", width = 500, height = 500)\nDimPlot(seur_scaled, reduction = \"umap\", label=TRUE)\ndev.off()\n\nsaveRDS(seur_scaled, \"data/seur_scaled.rds\")\nseur_scaled <- readRDS(\"data/seur_scaled.rds\")\n\n# Marker genes --------------------------------------------------------------\n# Makes a big feature plot with all the heatmap \n\n# You need to be able to state the gene symbol exactly - list them here\ngenes_of_interest <- c(\n  \"TTN\",\n  \"PAX7\",\n  \"ADIPOQ\",\n  \"MP2\",\n  \"PCAM1\",\n  \"MYHL1\",\n  \"MYH1\",\n  \"DCN\",\n  \"PTPRC\",\n  \"MKX\", \n  \"TNNT1\",\n  \"ANKRD1\",\n  \"MYOZ2\",\n  \"LAMA2\",\n  \"FBXO32\"\n)\n\n# The function below wil return those with an exact match (i.e. one gene withg that name)\naffle <- \n  map(genes_of_interest, ~{\n    rownames(seur_scaled)[grep(paste0(\"^\", .x), rownames(seur_scaled), ignore.case=T)]\n  }) %>%  \n  keep(~ length(.) == 1) %>% \n  list_c()\n\nsetdiff(genes_of_interest, affle)\n\n# The rest of the genes you will have to search for in the dataset with the below line, \n# pick the gene and put in the [previously] unknowns \nrownames(seur_scaled)[grep(paste0(\"^\", \"chrne\"), rownames(seur_scaled), ignore.case=T)]\n\nunknowns <- c(\n  \"TTN\",\n  \"ADIPOR1\",\n  \"ADIPOR2\",\n  \"MYH11\",\n  \"MYH1\"\n)\n\n# This will put all the gene names together saved in a dot images folder\nfinal <- c(unknowns, affle)\n\n# This will make individual heatmaps for each one\nork <-\n  final %>%\n  imap( ~ FeaturePlot(seur_scaled, features = .x, pt.size = 0.35))\nork <- setNames(ork, final)\ndir.create(\"dot_images\")\nork %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"dot_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\n# This will make violin plots for each one saved in a vln images folder\nork_vln <-\n  final %>%\n  imap( ~ VlnPlot(seur_scaled, features = .x))\nork_vln <- setNames(ork_vln, final)\ndir.create(\"vln_images\")\nork_vln %>%\n  imap(~{\n    namies <- .y\n    print(namies)\n    ggsave(filename = paste0(\"vln_images/\", namies, \".png\"), \n           plot = .x,\n           width = 7,\n           height = 6,\n           units = \"in\")\n  })\n\nall_markers <- FindAllMarkers(seur_scaled, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\nall_markers %>%\n    group_by(cluster) %>%\n    slice_max(n = 20, order_by = avg_log2FC) %>%\n    print(n=Inf)\n\nwrite_csv(all_markers, \"results/wholemuscle_sn_allmarkers.csv\")\nsaveRDS(all_markers, \"data/wholemuscle_sn_allmarkers.rds\")\n\nall_markers %>%\n  filter(cluster == 2) %>%\n  select(gene) %>%\n  write_tsv(\"boops.tsv\")\n\nsaveRDS(seur_scaled, \"data/23-04-20-wm_sn_master_seurat.rds\")"
  },
  {
    "objectID": "single_cell.html#violin-plots",
    "href": "single_cell.html#violin-plots",
    "title": "Overview",
    "section": "Violin plots",
    "text": "Violin plots\n\nThe code to create violin plots of almi, gait and grip values for the cells (the people to which they belong) per cluster is outlined below.\nThe file is located at ~/Library/CloudStorage/OneDrive-UniversityofSouthampton/21-11-18-single_cell_seq/src/22-12-07-violinplots.R .\n\nmeta %>% \n  dplyr::select(ID, cluster_id, almhsq, xamaxgrip, xwspdms) %>% \n  mutate(across(ID, as_factor)) %>% \n  tibble()\n\nsample_size <- \n  meta_data %>% \n  group_by(cluster_id) %>% \n  summarize(num=n()) %>% \n  left_join(meta_data, ., by=\"cluster_id\") %>% \n  mutate(myaxis = paste0(cluster_id, \"\\n\", \"n=\", num))\n\n# Stacked + percent\nggplot(sample_size, aes(x=forcats::fct_reorder(myaxis, xwspdms, .fun=median, na.rm=T), y=xwspdms, fill=cluster_id)) + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"black\", alpha=0.2) +\n  xlab(\"Cluster\") +\n  theme(legend.position=\"none\") +\n  labs(title = \"Gait speed per cluster\",\n       subtitle = \"Clusters ordered by ascending gait speed\")\n\n\nggplot(sample_size, aes(x=forcats::fct_reorder(myaxis, xamaxgrip, .fun=median, na.rm=T), y=xamaxgrip, fill=cluster_id)) + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"black\", alpha=0.2) +\n  xlab(\"class\") +\n  theme(legend.position=\"none\") +\n  labs(title = \"Grip strength per cluster\",\n       subtitle = \"Clusters ordered by ascending grip strength\")\n\n\nggplot(sample_size, aes(x=forcats::fct_reorder(myaxis, almhsq, .fun=median, na.rm=T), y=almhsq, fill=cluster_id)) + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"black\", alpha=0.2) +\n  xlab(\"class\") +\n  theme(legend.position=\"none\") +\n  labs(title = \"ALMI per cluster\",\n       subtitle = \"Clusters ordered by ascending ALMI\")\n\n\nblorder <- c(                              \n  \"0\\nn=7280\", \n  \"1\\nn=7057\", \n  \"2\\nn=5803\", \n  \"3\\nn=5756\", \n  \"4\\nn=3927\", \n  \"5\\nn=3404\", \n  \"6\\nn=3328\",\n  \"7\\nn=632\",  \n  \"8\\nn=400\",  \n  \"9\\nn=376\", \n  \"10\\nn=374\", \n  \"11\\nn=173\", \n  \"12\\nn=125\")\n\n\na <- \nsample_size %>% \n  mutate(myaxis = fct_relevel(myaxis, blorder)) %>% \n  ggplot(aes(x=myaxis, y=almhsq, fill=cluster_id)) + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"black\", alpha=0.2) +\n  xlab(\"class\") +\n  theme(legend.position=\"none\") +\n  labs(title = \"ALMI per cluster\",\n       subtitle = \"Clusters ordered by ascending ALMI\")\n\nb <- \nsample_size %>% \n  mutate(myaxis = fct_relevel(myaxis, blorder)) %>% \n  ggplot(aes(x=myaxis, y=xamaxgrip, fill=cluster_id)) + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"black\", alpha=0.2) +\n  xlab(\"class\") +\n  theme(legend.position=\"none\") +\n  labs(title = \"xamaxgrip per cluster\",\n       subtitle = \"Clusters ordered by ascending xamaxgrip\")\nc <- \nsample_size %>% \n  mutate(myaxis = fct_relevel(myaxis, blorder)) %>% \n  ggplot(aes(x=myaxis, y=xwspdms, fill=cluster_id)) + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"black\", alpha=0.2) +\n  xlab(\"class\") +\n  theme(legend.position=\"none\") +\n  labs(title = \"xwspdms per cluster\",\n       subtitle = \"Clusters ordered by ascending xwspdms\")\n\nggpubr::ggarrange(a,b,c,                                                 # First row with scatter plot\n          nrow = 3, \n          labels = c(\"A\", \"B\", \"C\")                                        # Labels of the scatter plot\n)"
  },
  {
    "objectID": "pseudotime.html",
    "href": "pseudotime.html",
    "title": "Pseudotime",
    "section": "",
    "text": "Pseudotime conducted on the single cell dataset."
  }
]